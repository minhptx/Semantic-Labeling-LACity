/* Generated by Cython 0.27.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "src/data_structure/graph_c/library.h"
        ],
        "extra_compile_args": [
            "-std=c++11"
        ],
        "include_dirs": [
            "src/data_structure/graph_c"
        ],
        "language": "c++",
        "name": "data_structure.graph_c.graph",
        "sources": [
            "src/data_structure/graph_c/graph.pyx",
            "src/data_structure/graph_c/library.cpp"
        ]
    },
    "module_name": "data_structure.graph_c.graph"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_27_3"
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (0 && PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX < 0x030700A0 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject **args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__data_structure__graph_c__graph
#define __PYX_HAVE_API__data_structure__graph_c__graph
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <sparsehash/dense_hash_map>
#include "library.h"
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "src/data_structure/graph_c/graph.pyx",
  "stringsource",
  "src/data_structure/graph_c/graph.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode;
struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink;
struct __pyx_obj_14data_structure_7graph_c_5graph_Graph;
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links;
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links;
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes;
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes;
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label;
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label;
struct __pyx_opt_args_14data_structure_7graph_c_5graph_5Graph_clone;

/* "data_structure/graph_c/graph.pxd":117
 *     cpdef int get_n_nodes(Graph)
 *     cpdef int get_n_links(Graph)
 *     cpdef Graph clone(Graph, int estimated_n_nodes=*, int estimated_n_links=*)             # <<<<<<<<<<<<<<
 * 
 *     # multi weird API to add node/link to support inheritance
 */
struct __pyx_opt_args_14data_structure_7graph_c_5graph_5Graph_clone {
  int __pyx_n;
  int estimated_n_nodes;
  int estimated_n_links;
};

/* "data_structure/graph_c/graph.pxd":61
 * 
 * 
 * cdef class GraphNode:             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         Graph _graph
 */
struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode {
  PyObject_HEAD
  struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphNode *__pyx_vtab;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *_graph;
  isi::Node *_node;
};


/* "data_structure/graph_c/graph.pxd":77
 * 
 * 
 * cdef class GraphLink:             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         Graph _graph
 */
struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink {
  PyObject_HEAD
  struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphLink *__pyx_vtab;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *_graph;
  isi::Link *_link;
};


/* "data_structure/graph_c/graph.pxd":95
 * 
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 *     cdef readonly:
 *         string name
 */
struct __pyx_obj_14data_structure_7graph_c_5graph_Graph {
  PyObject_HEAD
  struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *__pyx_vtab;
  std::string name;
  PyObject *gnodes;
  PyObject *glinks;
  isi::Graph *_graph_c;
};


/* "data_structure/graph_c/graph.pyx":40
 *             return None
 * 
 *     def iter_incoming_links(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self._node.incoming_link_ids.size()):
 */
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links {
  PyObject_HEAD
  int __pyx_v_i;
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self;
  std::vector<int> ::size_type __pyx_t_0;
  int __pyx_t_1;
};


/* "data_structure/graph_c/graph.pyx":45
 *             yield self._graph.get_link_by_id(self._node.incoming_link_ids[i])
 * 
 *     def iter_outgoing_links(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self._node.outgoing_link_ids.size()):
 */
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links {
  PyObject_HEAD
  int __pyx_v_i;
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self;
  std::vector<int> ::size_type __pyx_t_0;
  int __pyx_t_1;
};


/* "data_structure/graph_c/graph.pyx":244
 *         return self.glinks
 * 
 *     def iter_class_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes {
  PyObject_HEAD
  unsigned int __pyx_v_i;
  std::vector<int>  *__pyx_v_id_array;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self;
  std::vector<int> ::size_type __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "data_structure/graph_c/graph.pyx":257
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_data_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes {
  PyObject_HEAD
  unsigned int __pyx_v_i;
  std::vector<int>  *__pyx_v_id_array;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self;
  std::vector<int> ::size_type __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "data_structure/graph_c/graph.pyx":270
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_nodes_by_label(self, string label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label {
  PyObject_HEAD
  unsigned int __pyx_v_i;
  std::vector<int>  *__pyx_v_id_array;
  std::string __pyx_v_label;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self;
  std::vector<int> ::size_type __pyx_t_0;
  unsigned int __pyx_t_1;
};


/* "data_structure/graph_c/graph.pyx":283
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_links_by_label(self, string label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */
struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label {
  PyObject_HEAD
  unsigned int __pyx_v_i;
  std::vector<int>  *__pyx_v_id_array;
  std::string __pyx_v_label;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self;
  std::vector<int> ::size_type __pyx_t_0;
  unsigned int __pyx_t_1;
};



/* "data_structure/graph_c/graph.pyx":12
 * 
 * 
 * cdef class GraphNode:             # <<<<<<<<<<<<<<
 * 
 *     @property
 */

struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphNode {
  int (*is_data_node)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch);
  int (*is_class_node)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch);
  int (*equal)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*get_first_incoming_link)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch);
  PyObject *(*get_printed_label)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int, int __pyx_skip_dispatch);
  PyObject *(*get_dot_format)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphNode *__pyx_vtabptr_14data_structure_7graph_c_5graph_GraphNode;


/* "data_structure/graph_c/graph.pyx":61
 * 
 * 
 * cdef class GraphLink:             # <<<<<<<<<<<<<<
 * 
 *     # C LEVEL FUNC
 */

struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphLink {
  isi::Node *(*get_source_node_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *);
  isi::Node *(*get_target_node_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *);
  int (*equal)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*get_source_node)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*get_target_node)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int __pyx_skip_dispatch);
  PyObject *(*get_printed_label)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int, int __pyx_skip_dispatch);
  PyObject *(*get_dot_format)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphLink *__pyx_vtabptr_14data_structure_7graph_c_5graph_GraphLink;


/* "data_structure/graph_c/graph.pyx":104
 * 
 * 
 * cdef class Graph:             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph", *args, **kwargs):
 */

struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph {
  isi::Node *(*add_new_node_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::NodeType, std::string);
  isi::Link *(*add_new_link_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::LinkType, std::string, int, int);
  isi::Node *(*get_node_by_id_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int);
  isi::Link *(*get_link_by_id_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int);
  int (*get_n_nodes_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *);
  int (*get_n_links_c)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *);
  void (*set_name)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, std::string, int __pyx_skip_dispatch);
  int (*get_n_nodes)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch);
  int (*get_n_links)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *(*clone)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch, struct __pyx_opt_args_14data_structure_7graph_c_5graph_5Graph_clone *__pyx_optional_args);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*real_add_new_node)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, enum isi::NodeType, std::string, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*real_add_new_link)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, enum isi::LinkType, std::string, int, int, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*add_new_node)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::NodeType, std::string, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*add_new_link)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::LinkType, std::string, int, int, int __pyx_skip_dispatch);
  int (*has_node_with_id)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch);
  int (*has_link_with_id)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*get_node_by_id)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch);
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*get_link_by_id)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch);
  PyObject *(*iter_nodes)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch);
  PyObject *(*iter_links)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch);
  int (*equal)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch);
  PyObject *(*to_dict)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *__pyx_vtabptr_14data_structure_7graph_c_5graph_Graph;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* IncludeStringH.proto */
#include <string.h>

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__isi_3a__3a_NodeType(enum isi::NodeType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__isi_3a__3a_LinkType(enum isi::LinkType value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum isi::NodeType __Pyx_PyInt_As_enum__isi_3a__3a_NodeType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum isi::LinkType __Pyx_PyInt_As_enum__isi_3a__3a_LinkType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->exc_type, &(self)->exc_value, &(self)->exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(self);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->exc_type, (self)->exc_value, (self)->exc_traceback);\
    (self)->exc_type = (self)->exc_value = (self)->exc_traceback = NULL;\
    }
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_data_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_class_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_another, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_first_incoming_link(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch); /* proto*/
static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_source_node_c(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto*/
static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_target_node_c(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_9GraphLink_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_another, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_source_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_target_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch); /* proto*/
static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_node_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label); /* proto*/
static isi::Link *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_link_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id); /* proto*/
static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_node_by_id_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id); /* proto*/
static isi::Link *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_link_by_id_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_nodes_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_links_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto*/
static void __pyx_f_14data_structure_7graph_c_5graph_5Graph_set_name(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_name, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_f_14data_structure_7graph_c_5graph_5Graph_clone(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_14data_structure_7graph_c_5graph_5Graph_clone *__pyx_optional_args); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_gnode, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_glink, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_has_node_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_has_link_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_node_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch); /* proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_link_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_another, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_5Graph_to_dict(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'sparsehash.dense_hash_map' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'data_structure.graph_c.graph' */
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph_Graph = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label = 0;
static PyTypeObject *__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
#define __Pyx_MODULE_NAME "data_structure.graph_c.graph"
extern int __pyx_module_is_main_data_structure__graph_c__graph;
int __pyx_module_is_main_data_structure__graph_c__graph = 0;

/* Implementation of 'data_structure.graph_c.graph' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_id[] = "id";
static const char __pyx_k_dpi[] = "dpi";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_clone[] = "clone";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_equal[] = "equal";
static const char __pyx_k_glink[] = "glink";
static const char __pyx_k_gnode[] = "gnode";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_decode[] = "decode";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_L_03d_s[] = "L%03d: %s";
static const char __pyx_k_N_03d_s[] = "N%03d: %s";
static const char __pyx_k_to_dict[] = "to_dict";
static const char __pyx_k_f_output[] = "f_output";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_set_name[] = "set_name";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_auto_wrap[] = "auto_wrap";
static const char __pyx_k_from_dict[] = "from_dict";
static const char __pyx_k_graph2img[] = "graph2img";
static const char __pyx_k_graph2pdf[] = "graph2pdf";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_source_id[] = "source_id";
static const char __pyx_k_target_id[] = "target_id";
static const char __pyx_k_dict2graph[] = "dict2graph";
static const char __pyx_k_graph2dict[] = "graph2dict";
static const char __pyx_k_iter_links[] = "iter_links";
static const char __pyx_k_iter_nodes[] = "iter_nodes";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_get_n_links[] = "get_n_links";
static const char __pyx_k_get_n_nodes[] = "get_n_nodes";
static const char __pyx_k_add_new_link[] = "add_new_link";
static const char __pyx_k_add_new_node[] = "add_new_node";
static const char __pyx_k_is_data_node[] = "is_data_node";
static const char __pyx_k_render_graph[] = "render_graph";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_is_class_node[] = "is_class_node";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_get_dot_format[] = "get_dot_format";
static const char __pyx_k_get_link_by_id[] = "get_link_by_id";
static const char __pyx_k_get_node_by_id[] = "get_node_by_id";
static const char __pyx_k_max_text_width[] = "max_text_width";
static const char __pyx_k_unicode_escape[] = "unicode_escape";
static const char __pyx_k_get_source_node[] = "get_source_node";
static const char __pyx_k_get_target_node[] = "get_target_node";
static const char __pyx_k_index_node_type[] = "index_node_type";
static const char __pyx_k_iter_data_nodes[] = "iter_data_nodes";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_has_link_with_id[] = "has_link_with_id";
static const char __pyx_k_has_node_with_id[] = "has_node_with_id";
static const char __pyx_k_index_link_label[] = "index_link_label";
static const char __pyx_k_index_node_label[] = "index_node_label";
static const char __pyx_k_iter_class_nodes[] = "iter_class_nodes";
static const char __pyx_k_estimated_n_links[] = "estimated_n_links";
static const char __pyx_k_estimated_n_nodes[] = "estimated_n_nodes";
static const char __pyx_k_get_printed_label[] = "get_printed_label";
static const char __pyx_k_real_add_new_link[] = "real_add_new_link";
static const char __pyx_k_real_add_new_node[] = "real_add_new_node";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_iter_incoming_links[] = "iter_incoming_links";
static const char __pyx_k_iter_links_by_label[] = "iter_links_by_label";
static const char __pyx_k_iter_nodes_by_label[] = "iter_nodes_by_label";
static const char __pyx_k_iter_outgoing_links[] = "iter_outgoing_links";
static const char __pyx_k_Graph_iter_data_nodes[] = "Graph.iter_data_nodes";
static const char __pyx_k_Graph_iter_class_nodes[] = "Graph.iter_class_nodes";
static const char __pyx_k_get_first_incoming_link[] = "get_first_incoming_link";
static const char __pyx_k_data_structure_utilities[] = "data_structure.utilities";
static const char __pyx_k_Graph_iter_links_by_label[] = "Graph.iter_links_by_label";
static const char __pyx_k_Graph_iter_nodes_by_label[] = "Graph.iter_nodes_by_label";
static const char __pyx_k_data_structure_graph_c_graph[] = "data_structure.graph_c.graph";
static const char __pyx_k_GraphNode_iter_incoming_links[] = "GraphNode.iter_incoming_links";
static const char __pyx_k_GraphNode_iter_outgoing_links[] = "GraphNode.iter_outgoing_links";
static const char __pyx_k_s_shape_plaintext_style_filled[] = "\"%s\"[shape=\"plaintext\",style=\"filled\",fillcolor=\"gold\",label=\"%s\"];";
static const char __pyx_k_Must_be_indexed_before_invoking[] = "Must be indexed before invoking";
static const char __pyx_k_s_s_color_brown_fontcolor_black[] = "\"%s\" -> \"%s\"[color=\"brown\",fontcolor=\"black\",label=\"%s\"];";
static const char __pyx_k_s_style_filled_color_white_fill[] = "\"%s\"[style=\"filled\",color=\"white\",fillcolor=\"lightgray\",label=\"%s\"];";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_self__link_cannot_be_converted_t[] = "self._link cannot be converted to a Python object for pickling";
static const char __pyx_k_self__node_cannot_be_converted_t[] = "self._node cannot be converted to a Python object for pickling";
static const char __pyx_k_semantic_modeling_algorithm_stri[] = "semantic_modeling.algorithm.string";
static const char __pyx_k_src_data_structure_graph_c_graph[] = "src/data_structure/graph_c/graph.pyx";
static PyObject *__pyx_n_s_GraphNode_iter_incoming_links;
static PyObject *__pyx_n_s_GraphNode_iter_outgoing_links;
static PyObject *__pyx_n_s_Graph_iter_class_nodes;
static PyObject *__pyx_n_s_Graph_iter_data_nodes;
static PyObject *__pyx_n_s_Graph_iter_links_by_label;
static PyObject *__pyx_n_s_Graph_iter_nodes_by_label;
static PyObject *__pyx_kp_s_L_03d_s;
static PyObject *__pyx_kp_s_Must_be_indexed_before_invoking;
static PyObject *__pyx_kp_s_N_03d_s;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_add_new_link;
static PyObject *__pyx_n_s_add_new_node;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_auto_wrap;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clone;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_data_structure_graph_c_graph;
static PyObject *__pyx_n_s_data_structure_utilities;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_dict2graph;
static PyObject *__pyx_n_s_dpi;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_equal;
static PyObject *__pyx_n_s_estimated_n_links;
static PyObject *__pyx_n_s_estimated_n_nodes;
static PyObject *__pyx_n_s_f_output;
static PyObject *__pyx_n_s_from_dict;
static PyObject *__pyx_n_s_get_dot_format;
static PyObject *__pyx_n_s_get_first_incoming_link;
static PyObject *__pyx_n_s_get_link_by_id;
static PyObject *__pyx_n_s_get_n_links;
static PyObject *__pyx_n_s_get_n_nodes;
static PyObject *__pyx_n_s_get_node_by_id;
static PyObject *__pyx_n_s_get_printed_label;
static PyObject *__pyx_n_s_get_source_node;
static PyObject *__pyx_n_s_get_target_node;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_glink;
static PyObject *__pyx_n_s_gnode;
static PyObject *__pyx_n_b_graph;
static PyObject *__pyx_n_s_graph2dict;
static PyObject *__pyx_n_s_graph2img;
static PyObject *__pyx_n_s_graph2pdf;
static PyObject *__pyx_n_s_has_link_with_id;
static PyObject *__pyx_n_s_has_node_with_id;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index_link_label;
static PyObject *__pyx_n_s_index_node_label;
static PyObject *__pyx_n_s_index_node_type;
static PyObject *__pyx_n_s_is_class_node;
static PyObject *__pyx_n_s_is_data_node;
static PyObject *__pyx_n_s_iter_class_nodes;
static PyObject *__pyx_n_s_iter_data_nodes;
static PyObject *__pyx_n_s_iter_incoming_links;
static PyObject *__pyx_n_s_iter_links;
static PyObject *__pyx_n_s_iter_links_by_label;
static PyObject *__pyx_n_s_iter_nodes;
static PyObject *__pyx_n_s_iter_nodes_by_label;
static PyObject *__pyx_n_s_iter_outgoing_links;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_text_width;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_real_add_new_link;
static PyObject *__pyx_n_s_real_add_new_node;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_render_graph;
static PyObject *__pyx_kp_s_s_s_color_brown_fontcolor_black;
static PyObject *__pyx_kp_s_s_shape_plaintext_style_filled;
static PyObject *__pyx_kp_s_s_style_filled_color_white_fill;
static PyObject *__pyx_kp_s_self__link_cannot_be_converted_t;
static PyObject *__pyx_kp_s_self__node_cannot_be_converted_t;
static PyObject *__pyx_n_s_semantic_modeling_algorithm_stri;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_name;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_source_id;
static PyObject *__pyx_kp_s_src_data_structure_graph_c_graph;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_target_id;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_to_dict;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_unicode_escape;
static PyObject *__pyx_kp_s_utf_8;
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_2id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_4type___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_5label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16n_incoming_links___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16n_outgoing_links___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_is_data_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_2is_class_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_4equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_another); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_6get_first_incoming_link(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_8iter_incoming_links(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_11iter_outgoing_links(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_14get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_6_graph___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_2id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_4type___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_5label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_9source_id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_9target_id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_another); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_2get_source_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_4get_target_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_6get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_8get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_6_graph___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_14data_structure_7graph_c_5graph_5Graph___cinit__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_index_node_type, int __pyx_v_index_node_label, int __pyx_v_index_link_label, int __pyx_v_estimated_n_nodes, int __pyx_v_estimated_n_links, CYTHON_UNUSED std::string __pyx_v_name, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static int __pyx_pf_14data_structure_7graph_c_5graph_5Graph_2__init__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, CYTHON_UNUSED int __pyx_v_index_node_type, CYTHON_UNUSED int __pyx_v_index_node_label, CYTHON_UNUSED int __pyx_v_index_link_label, CYTHON_UNUSED int __pyx_v_estimated_n_nodes, CYTHON_UNUSED int __pyx_v_estimated_n_links, std::string __pyx_v_name); /* proto */
static void __pyx_pf_14data_structure_7graph_c_5graph_5Graph_4__dealloc__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_15index_node_type___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_16index_node_label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_16index_link_label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_6set_name(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_name); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_8get_n_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_10get_n_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_12clone(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_estimated_n_nodes, int __pyx_v_estimated_n_links); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_14real_add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_gnode, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_16real_add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_glink, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_18add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_20add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_22has_node_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_24has_link_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_26get_node_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_28get_link_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_30iter_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_32iter_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_34iter_class_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_37iter_data_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_40iter_nodes_by_label(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_label); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_43iter_links_by_label(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_label); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_46equal(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_another); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_48to_dict(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_50from_dict(PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_52render(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_dpi, int __pyx_v_max_text_width); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_54render2img(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, PyObject *__pyx_v_f_output, int __pyx_v_max_text_width); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_56render2pdf(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, PyObject *__pyx_v_f_output, int __pyx_v_max_text_width); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_58__getnewargs__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_60__getstate__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_62__setstate__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, PyObject *__pyx_v_state); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_4name___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph_GraphNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph_GraphLink(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph_Graph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static std::string __pyx_k__9;
static std::string __pyx_k__10;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_codeobj__14;

/* "data_structure/graph_c/graph.pyx":15
 * 
 *     @property
 *     def id(self): return self._node.id             # <<<<<<<<<<<<<<
 *     @property
 *     def type(self): return self._node.type
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_2id___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_2id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_node->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":17
 *     def id(self): return self._node.id
 *     @property
 *     def type(self): return self._node.type             # <<<<<<<<<<<<<<
 *     @property
 *     def label(self): return self._node.label
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_4type___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_4type___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__isi_3a__3a_NodeType(__pyx_v_self->_node->type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":19
 *     def type(self): return self._node.type
 *     @property
 *     def label(self): return self._node.label             # <<<<<<<<<<<<<<
 *     @property
 *     def n_incoming_links(self): return self._node.incoming_link_ids.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_5label___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_5label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_node->label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":21
 *     def label(self): return self._node.label
 *     @property
 *     def n_incoming_links(self): return self._node.incoming_link_ids.size()             # <<<<<<<<<<<<<<
 *     @property
 *     def n_outgoing_links(self): return self._node.outgoing_link_ids.size()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_16n_incoming_links_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_16n_incoming_links_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16n_incoming_links___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16n_incoming_links___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_node->incoming_link_ids.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.n_incoming_links.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":23
 *     def n_incoming_links(self): return self._node.incoming_link_ids.size()
 *     @property
 *     def n_outgoing_links(self): return self._node.outgoing_link_ids.size()             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint is_data_node(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_16n_outgoing_links_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_16n_outgoing_links_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16n_outgoing_links___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16n_outgoing_links___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_node->outgoing_link_ids.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.n_outgoing_links.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":25
 *     def n_outgoing_links(self): return self._node.outgoing_link_ids.size()
 * 
 *     cpdef bint is_data_node(self):             # <<<<<<<<<<<<<<
 *         return self._node.type == NodeType.DATA_NODE
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_1is_data_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_data_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("is_data_node", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_data_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_1is_data_node)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 25, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":26
 * 
 *     cpdef bint is_data_node(self):
 *         return self._node.type == NodeType.DATA_NODE             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint is_class_node(self):
 */
  __pyx_r = (__pyx_v_self->_node->type == isi::DATA_NODE);
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":25
 *     def n_outgoing_links(self): return self._node.outgoing_link_ids.size()
 * 
 *     cpdef bint is_data_node(self):             # <<<<<<<<<<<<<<
 *         return self._node.type == NodeType.DATA_NODE
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.GraphNode.is_data_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_1is_data_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_1is_data_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_data_node (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_is_data_node(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_is_data_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_data_node", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_data_node(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.is_data_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":28
 *         return self._node.type == NodeType.DATA_NODE
 * 
 *     cpdef bint is_class_node(self):             # <<<<<<<<<<<<<<
 *         return self._node.type == NodeType.CLASS_NODE
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_3is_class_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_class_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("is_class_node", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_class_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_3is_class_node)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 28, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":29
 * 
 *     cpdef bint is_class_node(self):
 *         return self._node.type == NodeType.CLASS_NODE             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint equal(self, GraphNode another):
 */
  __pyx_r = (__pyx_v_self->_node->type == isi::CLASS_NODE);
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":28
 *         return self._node.type == NodeType.DATA_NODE
 * 
 *     cpdef bint is_class_node(self):             # <<<<<<<<<<<<<<
 *         return self._node.type == NodeType.CLASS_NODE
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.GraphNode.is_class_node", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_3is_class_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_3is_class_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_class_node (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_2is_class_node(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_2is_class_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_class_node", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_class_node(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.is_class_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":31
 *         return self._node.type == NodeType.CLASS_NODE
 * 
 *     cpdef bint equal(self, GraphNode another):             # <<<<<<<<<<<<<<
 *         return self._node.equal(deref(another._node))
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_another, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("equal", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_equal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5equal)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_another)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_another)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_another)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 31, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_another));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_another));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_another));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 31, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":32
 * 
 *     cpdef bint equal(self, GraphNode another):
 *         return self._node.equal(deref(another._node))             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphLink get_first_incoming_link(self):
 */
  __pyx_r = __pyx_v_self->_node->equal((*__pyx_v_another->_node));
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":31
 *         return self._node.type == NodeType.CLASS_NODE
 * 
 *     cpdef bint equal(self, GraphNode another):             # <<<<<<<<<<<<<<
 *         return self._node.equal(deref(another._node))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.GraphNode.equal", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equal (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_another), __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode, 1, "another", 0))) __PYX_ERR(0, 31, __pyx_L1_error)
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_4equal(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self), ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_another));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_4equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_another) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("equal", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_equal(__pyx_v_self, __pyx_v_another, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":34
 *         return self._node.equal(deref(another._node))
 * 
 *     cpdef GraphLink get_first_incoming_link(self):             # <<<<<<<<<<<<<<
 *         if self._node.incoming_link_ids.size() > 0:
 *             return self._graph.get_link_by_id(self._node.incoming_link_ids[0])
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_7get_first_incoming_link(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_first_incoming_link(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_first_incoming_link", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_first_incoming_link); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_7get_first_incoming_link)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink))))) __PYX_ERR(0, 34, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":35
 * 
 *     cpdef GraphLink get_first_incoming_link(self):
 *         if self._node.incoming_link_ids.size() > 0:             # <<<<<<<<<<<<<<
 *             return self._graph.get_link_by_id(self._node.incoming_link_ids[0])
 *         else:
 */
  __pyx_t_5 = ((__pyx_v_self->_node->incoming_link_ids.size() > 0) != 0);
  if (__pyx_t_5) {

    /* "data_structure/graph_c/graph.pyx":36
 *     cpdef GraphLink get_first_incoming_link(self):
 *         if self._node.incoming_link_ids.size() > 0:
 *             return self._graph.get_link_by_id(self._node.incoming_link_ids[0])             # <<<<<<<<<<<<<<
 *         else:
 *             return None
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->_graph->__pyx_vtab)->get_link_by_id(__pyx_v_self->_graph, (__pyx_v_self->_node->incoming_link_ids[0]), 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "data_structure/graph_c/graph.pyx":35
 * 
 *     cpdef GraphLink get_first_incoming_link(self):
 *         if self._node.incoming_link_ids.size() > 0:             # <<<<<<<<<<<<<<
 *             return self._graph.get_link_by_id(self._node.incoming_link_ids[0])
 *         else:
 */
  }

  /* "data_structure/graph_c/graph.pyx":38
 *             return self._graph.get_link_by_id(self._node.incoming_link_ids[0])
 *         else:
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     def iter_incoming_links(self):
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));
    __Pyx_INCREF(Py_None);
    __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)Py_None);
    goto __pyx_L0;
  }

  /* "data_structure/graph_c/graph.pyx":34
 *         return self._node.equal(deref(another._node))
 * 
 *     cpdef GraphLink get_first_incoming_link(self):             # <<<<<<<<<<<<<<
 *         if self._node.incoming_link_ids.size() > 0:
 *             return self._graph.get_link_by_id(self._node.incoming_link_ids[0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_first_incoming_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_7get_first_incoming_link(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_7get_first_incoming_link(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_first_incoming_link (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_6get_first_incoming_link(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_6get_first_incoming_link(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_first_incoming_link", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_first_incoming_link(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_first_incoming_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_9GraphNode_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "data_structure/graph_c/graph.pyx":40
 *             return None
 * 
 *     def iter_incoming_links(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self._node.incoming_link_ids.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_9iter_incoming_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_9iter_incoming_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_incoming_links (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_8iter_incoming_links(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_8iter_incoming_links(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_incoming_links", 0);
  __pyx_cur_scope = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *)__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links(__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 40, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14data_structure_7graph_c_5graph_9GraphNode_10generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_incoming_links, __pyx_n_s_GraphNode_iter_incoming_links, __pyx_n_s_data_structure_graph_c_graph); if (unlikely(!gen)) __PYX_ERR(0, 40, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.iter_incoming_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_9GraphNode_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *__pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<int> ::size_type __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_incoming_links", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 40, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":42
 *     def iter_incoming_links(self):
 *         cdef int i
 *         for i in range(self._node.incoming_link_ids.size()):             # <<<<<<<<<<<<<<
 *             yield self._graph.get_link_by_id(self._node.incoming_link_ids[i])
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_node->incoming_link_ids.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "data_structure/graph_c/graph.pyx":43
 *         cdef int i
 *         for i in range(self._node.incoming_link_ids.size()):
 *             yield self._graph.get_link_by_id(self._node.incoming_link_ids[i])             # <<<<<<<<<<<<<<
 * 
 *     def iter_outgoing_links(self):
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_cur_scope->__pyx_v_self->_graph->__pyx_vtab)->get_link_by_id(__pyx_cur_scope->__pyx_v_self->_graph, (__pyx_cur_scope->__pyx_v_self->_node->incoming_link_ids[__pyx_cur_scope->__pyx_v_i]), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 43, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "data_structure/graph_c/graph.pyx":40
 *             return None
 * 
 *     def iter_incoming_links(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self._node.incoming_link_ids.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("iter_incoming_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_9GraphNode_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "data_structure/graph_c/graph.pyx":45
 *             yield self._graph.get_link_by_id(self._node.incoming_link_ids[i])
 * 
 *     def iter_outgoing_links(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self._node.outgoing_link_ids.size()):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_12iter_outgoing_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_12iter_outgoing_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_outgoing_links (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_11iter_outgoing_links(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_11iter_outgoing_links(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_outgoing_links", 0);
  __pyx_cur_scope = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *)__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links(__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 45, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14data_structure_7graph_c_5graph_9GraphNode_13generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_outgoing_links, __pyx_n_s_GraphNode_iter_outgoing_links, __pyx_n_s_data_structure_graph_c_graph); if (unlikely(!gen)) __PYX_ERR(0, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.iter_outgoing_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_9GraphNode_13generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *__pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  std::vector<int> ::size_type __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_outgoing_links", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 45, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":47
 *     def iter_outgoing_links(self):
 *         cdef int i
 *         for i in range(self._node.outgoing_link_ids.size()):             # <<<<<<<<<<<<<<
 *             yield self._graph.get_link_by_id(self._node.outgoing_link_ids[i])
 * 
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_node->outgoing_link_ids.size();
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_1; __pyx_t_2+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_2;

    /* "data_structure/graph_c/graph.pyx":48
 *         cdef int i
 *         for i in range(self._node.outgoing_link_ids.size()):
 *             yield self._graph.get_link_by_id(self._node.outgoing_link_ids[i])             # <<<<<<<<<<<<<<
 * 
 *     cpdef str get_printed_label(self, int max_text_width):
 */
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_cur_scope->__pyx_v_self->_graph->__pyx_vtab)->get_link_by_id(__pyx_cur_scope->__pyx_v_self->_graph, (__pyx_cur_scope->__pyx_v_self->_node->outgoing_link_ids[__pyx_cur_scope->__pyx_v_i]), 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 48, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 48, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "data_structure/graph_c/graph.pyx":45
 *             yield self._graph.get_link_by_id(self._node.incoming_link_ids[i])
 * 
 *     def iter_outgoing_links(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self._node.outgoing_link_ids.size()):
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("iter_outgoing_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":50
 *             yield self._graph.get_link_by_id(self._node.outgoing_link_ids[i])
 * 
 *     cpdef str get_printed_label(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         return auto_wrap("N%03d: %s" % (self._node.id, self._node.label.decode('utf-8')), max_text_width)
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_15get_printed_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("get_printed_label", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_printed_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_15get_printed_label)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 50, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 50, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":51
 * 
 *     cpdef str get_printed_label(self, int max_text_width):
 *         return auto_wrap("N%03d: %s" % (self._node.id, self._node.label.decode('utf-8')), max_text_width)             # <<<<<<<<<<<<<<
 * 
 *     cpdef str get_dot_format(self, int max_text_width):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_auto_wrap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_node->id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_decode_cpp_string(__pyx_v_self->_node->label, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_N_03d_s, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_3);
    __pyx_t_6 = 0;
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 51, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":50
 *             yield self._graph.get_link_by_id(self._node.outgoing_link_ids[i])
 * 
 *     cpdef str get_printed_label(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         return auto_wrap("N%03d: %s" % (self._node.id, self._node.label.decode('utf-8')), max_text_width)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_printed_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_15get_printed_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_15get_printed_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width) {
  int __pyx_v_max_text_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_printed_label (wrapper)", 0);
  assert(__pyx_arg_max_text_width); {
    __pyx_v_max_text_width = __Pyx_PyInt_As_int(__pyx_arg_max_text_width); if (unlikely((__pyx_v_max_text_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 50, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_printed_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_14get_printed_label(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self), ((int)__pyx_v_max_text_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_14get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_printed_label", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_printed_label(__pyx_v_self, __pyx_v_max_text_width, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_printed_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":53
 *         return auto_wrap("N%03d: %s" % (self._node.id, self._node.label.decode('utf-8')), max_text_width)
 * 
 *     cpdef str get_dot_format(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         if self._node.type == NodeType.CLASS_NODE:
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_17get_dot_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("get_dot_format", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_dot_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_17get_dot_format)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 53, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 53, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":54
 * 
 *     cpdef str get_dot_format(self, int max_text_width):
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')             # <<<<<<<<<<<<<<
 *         if self._node.type == NodeType.CLASS_NODE:
 *             return '"%s"[style="filled",color="white",fillcolor="lightgray",label="%s"];' % (self._node.id, label)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self->__pyx_vtab)->get_printed_label(__pyx_v_self, __pyx_v_max_text_width, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_label = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":55
 *     cpdef str get_dot_format(self, int max_text_width):
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         if self._node.type == NodeType.CLASS_NODE:             # <<<<<<<<<<<<<<
 *             return '"%s"[style="filled",color="white",fillcolor="lightgray",label="%s"];' % (self._node.id, label)
 * 
 */
  __pyx_t_7 = ((__pyx_v_self->_node->type == isi::CLASS_NODE) != 0);
  if (__pyx_t_7) {

    /* "data_structure/graph_c/graph.pyx":56
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         if self._node.type == NodeType.CLASS_NODE:
 *             return '"%s"[style="filled",color="white",fillcolor="lightgray",label="%s"];' % (self._node.id, label)             # <<<<<<<<<<<<<<
 * 
 *         return '"%s"[shape="plaintext",style="filled",fillcolor="gold",label="%s"];' % (self._node.id, label)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_node->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_label);
    __Pyx_GIVEREF(__pyx_v_label);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_label);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_style_filled_color_white_fill, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 56, __pyx_L1_error)
    __pyx_r = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "data_structure/graph_c/graph.pyx":55
 *     cpdef str get_dot_format(self, int max_text_width):
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         if self._node.type == NodeType.CLASS_NODE:             # <<<<<<<<<<<<<<
 *             return '"%s"[style="filled",color="white",fillcolor="lightgray",label="%s"];' % (self._node.id, label)
 * 
 */
  }

  /* "data_structure/graph_c/graph.pyx":58
 *             return '"%s"[style="filled",color="white",fillcolor="lightgray",label="%s"];' % (self._node.id, label)
 * 
 *         return '"%s"[shape="plaintext",style="filled",fillcolor="gold",label="%s"];' % (self._node.id, label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_node->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_v_label);
  __Pyx_GIVEREF(__pyx_v_label);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_label);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_shape_plaintext_style_filled, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":53
 *         return auto_wrap("N%03d: %s" % (self._node.id, self._node.label.decode('utf-8')), max_text_width)
 * 
 *     cpdef str get_dot_format(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         if self._node.type == NodeType.CLASS_NODE:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_dot_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_17get_dot_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_17get_dot_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width) {
  int __pyx_v_max_text_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dot_format (wrapper)", 0);
  assert(__pyx_arg_max_text_width); {
    __pyx_v_max_text_width = __Pyx_PyInt_As_int(__pyx_arg_max_text_width); if (unlikely((__pyx_v_max_text_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_dot_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16get_dot_format(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self), ((int)__pyx_v_max_text_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_16get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, int __pyx_v_max_text_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_dot_format", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_dot_format(__pyx_v_self, __pyx_v_max_text_width, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.get_dot_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pxd":63
 * cdef class GraphNode:
 *     cdef readonly:
 *         Graph _graph             # <<<<<<<<<<<<<<
 *     cdef:
 *         Node *_node
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_6_graph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_6_graph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_6_graph___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_6_graph___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_graph));
  __pyx_r = ((PyObject *)__pyx_v_self->_graph);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_18__reduce_cython__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_20__setstate_cython__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphNode_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":64
 * 
 *     # C LEVEL FUNC
 *     cdef Node* get_source_node_c(self):             # <<<<<<<<<<<<<<
 *         return &self._graph._graph_c.nodes[self._link.source_id]
 * 
 */

static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_source_node_c(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  isi::Node *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_source_node_c", 0);

  /* "data_structure/graph_c/graph.pyx":65
 *     # C LEVEL FUNC
 *     cdef Node* get_source_node_c(self):
 *         return &self._graph._graph_c.nodes[self._link.source_id]             # <<<<<<<<<<<<<<
 * 
 *     cdef Node* get_target_node_c(self):
 */
  __pyx_r = (&(__pyx_v_self->_graph->_graph_c->nodes[__pyx_v_self->_link->source_id]));
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":64
 * 
 *     # C LEVEL FUNC
 *     cdef Node* get_source_node_c(self):             # <<<<<<<<<<<<<<
 *         return &self._graph._graph_c.nodes[self._link.source_id]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":67
 *         return &self._graph._graph_c.nodes[self._link.source_id]
 * 
 *     cdef Node* get_target_node_c(self):             # <<<<<<<<<<<<<<
 *         return &self._graph._graph_c.nodes[self._link.target_id]
 * 
 */

static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_target_node_c(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  isi::Node *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_target_node_c", 0);

  /* "data_structure/graph_c/graph.pyx":68
 * 
 *     cdef Node* get_target_node_c(self):
 *         return &self._graph._graph_c.nodes[self._link.target_id]             # <<<<<<<<<<<<<<
 * 
 *     # PUBLIC FUNC
 */
  __pyx_r = (&(__pyx_v_self->_graph->_graph_c->nodes[__pyx_v_self->_link->target_id]));
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":67
 *         return &self._graph._graph_c.nodes[self._link.source_id]
 * 
 *     cdef Node* get_target_node_c(self):             # <<<<<<<<<<<<<<
 *         return &self._graph._graph_c.nodes[self._link.target_id]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":72
 *     # PUBLIC FUNC
 *     @property
 *     def id(self): return self._link.id             # <<<<<<<<<<<<<<
 *     @property
 *     def type(self): return self._link.type
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_2id___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_2id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_link->id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":74
 *     def id(self): return self._link.id
 *     @property
 *     def type(self): return self._link.type             # <<<<<<<<<<<<<<
 *     @property
 *     def label(self): return self._link.label
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_4type___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_4type___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_enum__isi_3a__3a_LinkType(__pyx_v_self->_link->type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":76
 *     def type(self): return self._link.type
 *     @property
 *     def label(self): return self._link.label             # <<<<<<<<<<<<<<
 *     @property
 *     def source_id(self): return self._link.source_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_5label___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_5label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->_link->label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":78
 *     def label(self): return self._link.label
 *     @property
 *     def source_id(self): return self._link.source_id             # <<<<<<<<<<<<<<
 *     @property
 *     def target_id(self): return self._link.target_id
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9source_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9source_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_9source_id___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_9source_id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_link->source_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.source_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":80
 *     def source_id(self): return self._link.source_id
 *     @property
 *     def target_id(self): return self._link.target_id             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint equal(self, GraphLink another):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9target_id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9target_id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_9target_id___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_9target_id___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_link->target_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.target_id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":82
 *     def target_id(self): return self._link.target_id
 * 
 *     cpdef bint equal(self, GraphLink another):             # <<<<<<<<<<<<<<
 *         return another is not None and \
 *             self._link.id == another._link.id and \
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_1equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_9GraphLink_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_another, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("equal", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_equal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_1equal)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_another)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_another)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_another)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 82, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_another));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_another));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_another));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 82, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":83
 * 
 *     cpdef bint equal(self, GraphLink another):
 *         return another is not None and \             # <<<<<<<<<<<<<<
 *             self._link.id == another._link.id and \
 *             self._link.type == another._link.type and \
 */
  __pyx_t_7 = (((PyObject *)__pyx_v_another) != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }

  /* "data_structure/graph_c/graph.pyx":84
 *     cpdef bint equal(self, GraphLink another):
 *         return another is not None and \
 *             self._link.id == another._link.id and \             # <<<<<<<<<<<<<<
 *             self._link.type == another._link.type and \
 *             self._link.label == another._link.label and \
 */
  __pyx_t_8 = ((__pyx_v_self->_link->id == __pyx_v_another->_link->id) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }

  /* "data_structure/graph_c/graph.pyx":85
 *         return another is not None and \
 *             self._link.id == another._link.id and \
 *             self._link.type == another._link.type and \             # <<<<<<<<<<<<<<
 *             self._link.label == another._link.label and \
 *             self._link.source_id == another._link.source_id and \
 */
  __pyx_t_8 = ((__pyx_v_self->_link->type == __pyx_v_another->_link->type) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }

  /* "data_structure/graph_c/graph.pyx":86
 *             self._link.id == another._link.id and \
 *             self._link.type == another._link.type and \
 *             self._link.label == another._link.label and \             # <<<<<<<<<<<<<<
 *             self._link.source_id == another._link.source_id and \
 *             self._link.target_id == another._link.target_id
 */
  __pyx_t_8 = ((__pyx_v_self->_link->label == __pyx_v_another->_link->label) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }

  /* "data_structure/graph_c/graph.pyx":87
 *             self._link.type == another._link.type and \
 *             self._link.label == another._link.label and \
 *             self._link.source_id == another._link.source_id and \             # <<<<<<<<<<<<<<
 *             self._link.target_id == another._link.target_id
 * 
 */
  __pyx_t_8 = ((__pyx_v_self->_link->source_id == __pyx_v_another->_link->source_id) != 0);
  if (__pyx_t_8) {
  } else {
    __pyx_t_6 = __pyx_t_8;
    goto __pyx_L3_bool_binop_done;
  }

  /* "data_structure/graph_c/graph.pyx":88
 *             self._link.label == another._link.label and \
 *             self._link.source_id == another._link.source_id and \
 *             self._link.target_id == another._link.target_id             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphNode get_source_node(self):
 */
  __pyx_t_8 = ((__pyx_v_self->_link->target_id == __pyx_v_another->_link->target_id) != 0);
  __pyx_t_6 = __pyx_t_8;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":82
 *     def target_id(self): return self._link.target_id
 * 
 *     cpdef bint equal(self, GraphLink another):             # <<<<<<<<<<<<<<
 *         return another is not None and \
 *             self._link.id == another._link.id and \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.GraphLink.equal", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_1equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_1equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equal (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_another), __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink, 1, "another", 0))) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_equal(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self), ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_another));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_another) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("equal", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_equal(__pyx_v_self, __pyx_v_another, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":90
 *             self._link.target_id == another._link.target_id
 * 
 *     cpdef GraphNode get_source_node(self):             # <<<<<<<<<<<<<<
 *         return self._graph.gnodes[self._link.source_id]
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_3get_source_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_source_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_source_node", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_source_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_3get_source_node)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 90, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":91
 * 
 *     cpdef GraphNode get_source_node(self):
 *         return self._graph.gnodes[self._link.source_id]             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphNode get_target_node(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (unlikely(__pyx_v_self->_graph->gnodes == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 91, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_graph->gnodes, __pyx_v_self->_link->source_id, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":90
 *             self._link.target_id == another._link.target_id
 * 
 *     cpdef GraphNode get_source_node(self):             # <<<<<<<<<<<<<<
 *         return self._graph.gnodes[self._link.source_id]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_source_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_3get_source_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_3get_source_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_source_node (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_2get_source_node(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_2get_source_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_source_node", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_source_node(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_source_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":93
 *         return self._graph.gnodes[self._link.source_id]
 * 
 *     cpdef GraphNode get_target_node(self):             # <<<<<<<<<<<<<<
 *         return self._graph.gnodes[self._link.target_id]
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5get_target_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_target_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("get_target_node", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_target_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5get_target_node)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 93, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":94
 * 
 *     cpdef GraphNode get_target_node(self):
 *         return self._graph.gnodes[self._link.target_id]             # <<<<<<<<<<<<<<
 * 
 *     cpdef str get_printed_label(self, int max_text_width):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (unlikely(__pyx_v_self->_graph->gnodes == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 94, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_graph->gnodes, __pyx_v_self->_link->target_id, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 94, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":93
 *         return self._graph.gnodes[self._link.source_id]
 * 
 *     cpdef GraphNode get_target_node(self):             # <<<<<<<<<<<<<<
 *         return self._graph.gnodes[self._link.target_id]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_target_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5get_target_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5get_target_node(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_target_node (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_4get_target_node(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_4get_target_node(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_target_node", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_target_node(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_target_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":96
 *         return self._graph.gnodes[self._link.target_id]
 * 
 *     cpdef str get_printed_label(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         return auto_wrap("L%03d: %s" % (self._link.id, self._link.label.decode('utf-8')), max_text_width)
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_7get_printed_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("get_printed_label", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_printed_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_7get_printed_label)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 96, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 96, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":97
 * 
 *     cpdef str get_printed_label(self, int max_text_width):
 *         return auto_wrap("L%03d: %s" % (self._link.id, self._link.label.decode('utf-8')), max_text_width)             # <<<<<<<<<<<<<<
 * 
 *     cpdef str get_dot_format(self, int max_text_width):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_auto_wrap); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_self->_link->id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_decode_cpp_string(__pyx_v_self->_link->label, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_L_03d_s, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_3);
    __pyx_t_6 = 0;
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 97, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":96
 *         return self._graph.gnodes[self._link.target_id]
 * 
 *     cpdef str get_printed_label(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         return auto_wrap("L%03d: %s" % (self._link.id, self._link.label.decode('utf-8')), max_text_width)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_printed_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_7get_printed_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_7get_printed_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width) {
  int __pyx_v_max_text_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_printed_label (wrapper)", 0);
  assert(__pyx_arg_max_text_width); {
    __pyx_v_max_text_width = __Pyx_PyInt_As_int(__pyx_arg_max_text_width); if (unlikely((__pyx_v_max_text_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 96, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_printed_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_6get_printed_label(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self), ((int)__pyx_v_max_text_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_6get_printed_label(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_printed_label", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_printed_label(__pyx_v_self, __pyx_v_max_text_width, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_printed_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":99
 *         return auto_wrap("L%03d: %s" % (self._link.id, self._link.label.decode('utf-8')), max_text_width)
 * 
 *     cpdef str get_dot_format(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         return '"%s" -> "%s"[color="brown",fontcolor="black",label="%s"];' % (self._link.source_id, self._link.target_id, label)
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9get_dot_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_label = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("get_dot_format", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_dot_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9get_dot_format)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(PyString_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 99, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":100
 * 
 *     cpdef str get_dot_format(self, int max_text_width):
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')             # <<<<<<<<<<<<<<
 *         return '"%s" -> "%s"[color="brown",fontcolor="black",label="%s"];' % (self._link.source_id, self._link.target_id, label)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self->__pyx_vtab)->get_printed_label(__pyx_v_self, __pyx_v_max_text_width, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_label = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":101
 *     cpdef str get_dot_format(self, int max_text_width):
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         return '"%s" -> "%s"[color="brown",fontcolor="black",label="%s"];' % (self._link.source_id, self._link.target_id, label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_link->source_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_link->target_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_label);
  __Pyx_GIVEREF(__pyx_v_label);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_label);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_s_s_color_brown_fontcolor_black, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(PyString_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":99
 *         return auto_wrap("L%03d: %s" % (self._link.id, self._link.label.decode('utf-8')), max_text_width)
 * 
 *     cpdef str get_dot_format(self, int max_text_width):             # <<<<<<<<<<<<<<
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')
 *         return '"%s" -> "%s"[color="brown",fontcolor="black",label="%s"];' % (self._link.source_id, self._link.target_id, label)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_dot_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_label);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9get_dot_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9get_dot_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_text_width) {
  int __pyx_v_max_text_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dot_format (wrapper)", 0);
  assert(__pyx_arg_max_text_width); {
    __pyx_v_max_text_width = __Pyx_PyInt_As_int(__pyx_arg_max_text_width); if (unlikely((__pyx_v_max_text_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 99, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_dot_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_8get_dot_format(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self), ((int)__pyx_v_max_text_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_8get_dot_format(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, int __pyx_v_max_text_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_dot_format", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_dot_format(__pyx_v_self, __pyx_v_max_text_width, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.get_dot_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pxd":79
 * cdef class GraphLink:
 *     cdef readonly:
 *         Graph _graph             # <<<<<<<<<<<<<<
 *     cdef:
 *         Link *_link
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_6_graph_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_6_graph_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_6_graph___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_6_graph___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_graph));
  __pyx_r = ((PyObject *)__pyx_v_self->_graph);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_10__reduce_cython__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_12__setstate_cython__(((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_9GraphLink_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.GraphLink.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":106
 * cdef class Graph:
 * 
 *     def __cinit__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph", *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._graph_c = new GraphC(index_node_type, index_node_label, index_link_label, estimated_n_nodes, estimated_n_links)
 * 
 */

/* Python wrapper */
static int __pyx_pw_14data_structure_7graph_c_5graph_5Graph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14data_structure_7graph_c_5graph_5Graph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index_node_type;
  int __pyx_v_index_node_label;
  int __pyx_v_index_link_label;
  int __pyx_v_estimated_n_nodes;
  int __pyx_v_estimated_n_links;
  CYTHON_UNUSED std::string __pyx_v_name;
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index_node_type,&__pyx_n_s_index_node_label,&__pyx_n_s_index_link_label,&__pyx_n_s_estimated_n_nodes,&__pyx_n_s_estimated_n_links,&__pyx_n_s_name,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_node_type);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_node_label);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_link_label);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimated_n_nodes);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimated_n_links);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__cinit__") < 0)) __PYX_ERR(0, 106, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    if (values[0]) {
      __pyx_v_index_node_type = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_index_node_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    } else {
      __pyx_v_index_node_type = ((int)0);
    }
    if (values[1]) {
      __pyx_v_index_node_label = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_index_node_label == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    } else {
      __pyx_v_index_node_label = ((int)0);
    }
    if (values[2]) {
      __pyx_v_index_link_label = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_index_link_label == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    } else {
      __pyx_v_index_link_label = ((int)0);
    }
    if (values[3]) {
      __pyx_v_estimated_n_nodes = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_estimated_n_nodes == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    } else {
      __pyx_v_estimated_n_nodes = ((int)24);
    }
    if (values[4]) {
      __pyx_v_estimated_n_links = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_estimated_n_links == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    } else {
      __pyx_v_estimated_n_links = ((int)23);
    }
    if (values[5]) {
      __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L3_error)
    } else {
      __pyx_v_name = __pyx_k__9;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph___cinit__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_index_node_type, __pyx_v_index_node_label, __pyx_v_index_link_label, __pyx_v_estimated_n_nodes, __pyx_v_estimated_n_links, __pyx_v_name, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14data_structure_7graph_c_5graph_5Graph___cinit__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_index_node_type, int __pyx_v_index_node_label, int __pyx_v_index_link_label, int __pyx_v_estimated_n_nodes, int __pyx_v_estimated_n_links, CYTHON_UNUSED std::string __pyx_v_name, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "data_structure/graph_c/graph.pyx":107
 * 
 *     def __cinit__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph", *args, **kwargs):
 *         self._graph_c = new GraphC(index_node_type, index_node_label, index_link_label, estimated_n_nodes, estimated_n_links)             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph"):
 */
  __pyx_v_self->_graph_c = new isi::Graph(__pyx_v_index_node_type, __pyx_v_index_node_label, __pyx_v_index_link_label, __pyx_v_estimated_n_nodes, __pyx_v_estimated_n_links);

  /* "data_structure/graph_c/graph.pyx":106
 * cdef class Graph:
 * 
 *     def __cinit__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph", *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._graph_c = new GraphC(index_node_type, index_node_label, index_link_label, estimated_n_nodes, estimated_n_links)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":109
 *         self._graph_c = new GraphC(index_node_type, index_node_label, index_link_label, estimated_n_nodes, estimated_n_links)
 * 
 *     def __init__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph"):             # <<<<<<<<<<<<<<
 *         self.name = name
 *         self.gnodes = []
 */

/* Python wrapper */
static int __pyx_pw_14data_structure_7graph_c_5graph_5Graph_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_14data_structure_7graph_c_5graph_5Graph_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED int __pyx_v_index_node_type;
  CYTHON_UNUSED int __pyx_v_index_node_label;
  CYTHON_UNUSED int __pyx_v_index_link_label;
  CYTHON_UNUSED int __pyx_v_estimated_n_nodes;
  CYTHON_UNUSED int __pyx_v_estimated_n_links;
  std::string __pyx_v_name;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index_node_type,&__pyx_n_s_index_node_label,&__pyx_n_s_index_link_label,&__pyx_n_s_estimated_n_nodes,&__pyx_n_s_estimated_n_links,&__pyx_n_s_name,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_node_type);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_node_label);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index_link_label);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimated_n_nodes);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimated_n_links);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 109, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_index_node_type = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_index_node_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    } else {
      __pyx_v_index_node_type = ((int)0);
    }
    if (values[1]) {
      __pyx_v_index_node_label = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_index_node_label == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    } else {
      __pyx_v_index_node_label = ((int)0);
    }
    if (values[2]) {
      __pyx_v_index_link_label = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_index_link_label == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    } else {
      __pyx_v_index_link_label = ((int)0);
    }
    if (values[3]) {
      __pyx_v_estimated_n_nodes = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_estimated_n_nodes == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    } else {
      __pyx_v_estimated_n_nodes = ((int)24);
    }
    if (values[4]) {
      __pyx_v_estimated_n_links = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_estimated_n_links == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    } else {
      __pyx_v_estimated_n_links = ((int)23);
    }
    if (values[5]) {
      __pyx_v_name = __pyx_convert_string_from_py_std__in_string(values[5]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
    } else {
      __pyx_v_name = __pyx_k__10;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_2__init__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_index_node_type, __pyx_v_index_node_label, __pyx_v_index_link_label, __pyx_v_estimated_n_nodes, __pyx_v_estimated_n_links, __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_14data_structure_7graph_c_5graph_5Graph_2__init__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, CYTHON_UNUSED int __pyx_v_index_node_type, CYTHON_UNUSED int __pyx_v_index_node_label, CYTHON_UNUSED int __pyx_v_index_link_label, CYTHON_UNUSED int __pyx_v_estimated_n_nodes, CYTHON_UNUSED int __pyx_v_estimated_n_links, std::string __pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "data_structure/graph_c/graph.pyx":110
 * 
 *     def __init__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph"):
 *         self.name = name             # <<<<<<<<<<<<<<
 *         self.gnodes = []
 *         self.glinks = []
 */
  __pyx_v_self->name = __pyx_v_name;

  /* "data_structure/graph_c/graph.pyx":111
 *     def __init__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph"):
 *         self.name = name
 *         self.gnodes = []             # <<<<<<<<<<<<<<
 *         self.glinks = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->gnodes);
  __Pyx_DECREF(__pyx_v_self->gnodes);
  __pyx_v_self->gnodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":112
 *         self.name = name
 *         self.gnodes = []
 *         self.glinks = []             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->glinks);
  __Pyx_DECREF(__pyx_v_self->glinks);
  __pyx_v_self->glinks = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":109
 *         self._graph_c = new GraphC(index_node_type, index_node_label, index_link_label, estimated_n_nodes, estimated_n_links)
 * 
 *     def __init__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph"):             # <<<<<<<<<<<<<<
 *         self.name = name
 *         self.gnodes = []
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":114
 *         self.glinks = []
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._graph_c
 * 
 */

/* Python wrapper */
static void __pyx_pw_14data_structure_7graph_c_5graph_5Graph_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_14data_structure_7graph_c_5graph_5Graph_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_14data_structure_7graph_c_5graph_5Graph_4__dealloc__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_14data_structure_7graph_c_5graph_5Graph_4__dealloc__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "data_structure/graph_c/graph.pyx":115
 * 
 *     def __dealloc__(self):
 *         del self._graph_c             # <<<<<<<<<<<<<<
 * 
 *     # ##########################################################################
 */
  delete __pyx_v_self->_graph_c;

  /* "data_structure/graph_c/graph.pyx":114
 *         self.glinks = []
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self._graph_c
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "data_structure/graph_c/graph.pyx":119
 *     # ##########################################################################
 *     # PRIVATE FUNC
 *     cdef Node* add_new_node_c(self, NodeType type, string label) except +:             # <<<<<<<<<<<<<<
 *         cdef:
 *             GraphNode gnode
 */

static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_node_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_gnode = 0;
  isi::Node *__pyx_v_node;
  int __pyx_v_i;
  int __pyx_v_is_resize;
  isi::Node *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("add_new_node_c", 0);

  /* "data_structure/graph_c/graph.pyx":126
 *             bint is_resize
 * 
 *         is_resize = self._graph_c.nodes.capacity() == self._graph_c.n_nodes             # <<<<<<<<<<<<<<
 *         node = self._graph_c.add_new_node(type, label)
 *         if is_resize:
 */
  __pyx_v_is_resize = (__pyx_v_self->_graph_c->nodes.capacity() == __pyx_v_self->_graph_c->n_nodes);

  /* "data_structure/graph_c/graph.pyx":127
 * 
 *         is_resize = self._graph_c.nodes.capacity() == self._graph_c.n_nodes
 *         node = self._graph_c.add_new_node(type, label)             # <<<<<<<<<<<<<<
 *         if is_resize:
 *             # hit the capacity, vector will be resize, we need to let every nodes aware of it
 */
  __pyx_v_node = __pyx_v_self->_graph_c->add_new_node(__pyx_v_type, __pyx_v_label);

  /* "data_structure/graph_c/graph.pyx":128
 *         is_resize = self._graph_c.nodes.capacity() == self._graph_c.n_nodes
 *         node = self._graph_c.add_new_node(type, label)
 *         if is_resize:             # <<<<<<<<<<<<<<
 *             # hit the capacity, vector will be resize, we need to let every nodes aware of it
 *             i = 0
 */
  __pyx_t_1 = (__pyx_v_is_resize != 0);
  if (__pyx_t_1) {

    /* "data_structure/graph_c/graph.pyx":130
 *         if is_resize:
 *             # hit the capacity, vector will be resize, we need to let every nodes aware of it
 *             i = 0             # <<<<<<<<<<<<<<
 *             for gnode in self.gnodes:
 *                 gnode._node = &self._graph_c.nodes[i]
 */
    __pyx_v_i = 0;

    /* "data_structure/graph_c/graph.pyx":131
 *             # hit the capacity, vector will be resize, we need to let every nodes aware of it
 *             i = 0
 *             for gnode in self.gnodes:             # <<<<<<<<<<<<<<
 *                 gnode._node = &self._graph_c.nodes[i]
 *                 i += 1
 */
    if (unlikely(__pyx_v_self->gnodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 131, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_self->gnodes; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 131, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_gnode, ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "data_structure/graph_c/graph.pyx":132
 *             i = 0
 *             for gnode in self.gnodes:
 *                 gnode._node = &self._graph_c.nodes[i]             # <<<<<<<<<<<<<<
 *                 i += 1
 * 
 */
      __pyx_v_gnode->_node = (&(__pyx_v_self->_graph_c->nodes[__pyx_v_i]));

      /* "data_structure/graph_c/graph.pyx":133
 *             for gnode in self.gnodes:
 *                 gnode._node = &self._graph_c.nodes[i]
 *                 i += 1             # <<<<<<<<<<<<<<
 * 
 *         return node
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "data_structure/graph_c/graph.pyx":131
 *             # hit the capacity, vector will be resize, we need to let every nodes aware of it
 *             i = 0
 *             for gnode in self.gnodes:             # <<<<<<<<<<<<<<
 *                 gnode._node = &self._graph_c.nodes[i]
 *                 i += 1
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":128
 *         is_resize = self._graph_c.nodes.capacity() == self._graph_c.n_nodes
 *         node = self._graph_c.add_new_node(type, label)
 *         if is_resize:             # <<<<<<<<<<<<<<
 *             # hit the capacity, vector will be resize, we need to let every nodes aware of it
 *             i = 0
 */
  }

  /* "data_structure/graph_c/graph.pyx":135
 *                 i += 1
 * 
 *         return node             # <<<<<<<<<<<<<<
 * 
 *     cdef Link* add_new_link_c(self, LinkType type, string label, int source_id, int target_id) except +:
 */
  __pyx_r = __pyx_v_node;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":119
 *     # ##########################################################################
 *     # PRIVATE FUNC
 *     cdef Node* add_new_node_c(self, NodeType type, string label) except +:             # <<<<<<<<<<<<<<
 *         cdef:
 *             GraphNode gnode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_node_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gnode);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":137
 *         return node
 * 
 *     cdef Link* add_new_link_c(self, LinkType type, string label, int source_id, int target_id) except +:             # <<<<<<<<<<<<<<
 *         cdef:
 *             GraphLink glink
 */

static isi::Link *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_link_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_glink = 0;
  isi::Link *__pyx_v_link;
  int __pyx_v_i;
  int __pyx_v_is_resize;
  isi::Link *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("add_new_link_c", 0);

  /* "data_structure/graph_c/graph.pyx":144
 *             bint is_resize
 * 
 *         is_resize = self._graph_c.links.capacity() == self._graph_c.n_links             # <<<<<<<<<<<<<<
 *         link = self._graph_c.add_new_link(type, label, source_id, target_id)
 *         if is_resize:
 */
  __pyx_v_is_resize = (__pyx_v_self->_graph_c->links.capacity() == __pyx_v_self->_graph_c->n_links);

  /* "data_structure/graph_c/graph.pyx":145
 * 
 *         is_resize = self._graph_c.links.capacity() == self._graph_c.n_links
 *         link = self._graph_c.add_new_link(type, label, source_id, target_id)             # <<<<<<<<<<<<<<
 *         if is_resize:
 *             # hit the capacity, vector will be resize, we need to let every links aware of it
 */
  __pyx_v_link = __pyx_v_self->_graph_c->add_new_link(__pyx_v_type, __pyx_v_label, __pyx_v_source_id, __pyx_v_target_id);

  /* "data_structure/graph_c/graph.pyx":146
 *         is_resize = self._graph_c.links.capacity() == self._graph_c.n_links
 *         link = self._graph_c.add_new_link(type, label, source_id, target_id)
 *         if is_resize:             # <<<<<<<<<<<<<<
 *             # hit the capacity, vector will be resize, we need to let every links aware of it
 *             i = 0
 */
  __pyx_t_1 = (__pyx_v_is_resize != 0);
  if (__pyx_t_1) {

    /* "data_structure/graph_c/graph.pyx":148
 *         if is_resize:
 *             # hit the capacity, vector will be resize, we need to let every links aware of it
 *             i = 0             # <<<<<<<<<<<<<<
 *             for glink in self.glinks:
 *                 glink._link = &self._graph_c.links[i]
 */
    __pyx_v_i = 0;

    /* "data_structure/graph_c/graph.pyx":149
 *             # hit the capacity, vector will be resize, we need to let every links aware of it
 *             i = 0
 *             for glink in self.glinks:             # <<<<<<<<<<<<<<
 *                 glink._link = &self._graph_c.links[i]
 *                 i += 1
 */
    if (unlikely(__pyx_v_self->glinks == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 149, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_v_self->glinks; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    for (;;) {
      if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
      #else
      __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink))))) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_glink, ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "data_structure/graph_c/graph.pyx":150
 *             i = 0
 *             for glink in self.glinks:
 *                 glink._link = &self._graph_c.links[i]             # <<<<<<<<<<<<<<
 *                 i += 1
 * 
 */
      __pyx_v_glink->_link = (&(__pyx_v_self->_graph_c->links[__pyx_v_i]));

      /* "data_structure/graph_c/graph.pyx":151
 *             for glink in self.glinks:
 *                 glink._link = &self._graph_c.links[i]
 *                 i += 1             # <<<<<<<<<<<<<<
 * 
 *         return link
 */
      __pyx_v_i = (__pyx_v_i + 1);

      /* "data_structure/graph_c/graph.pyx":149
 *             # hit the capacity, vector will be resize, we need to let every links aware of it
 *             i = 0
 *             for glink in self.glinks:             # <<<<<<<<<<<<<<
 *                 glink._link = &self._graph_c.links[i]
 *                 i += 1
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":146
 *         is_resize = self._graph_c.links.capacity() == self._graph_c.n_links
 *         link = self._graph_c.add_new_link(type, label, source_id, target_id)
 *         if is_resize:             # <<<<<<<<<<<<<<
 *             # hit the capacity, vector will be resize, we need to let every links aware of it
 *             i = 0
 */
  }

  /* "data_structure/graph_c/graph.pyx":153
 *                 i += 1
 * 
 *         return link             # <<<<<<<<<<<<<<
 * 
 *     # ##########################################################################
 */
  __pyx_r = __pyx_v_link;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":137
 *         return node
 * 
 *     cdef Link* add_new_link_c(self, LinkType type, string label, int source_id, int target_id) except +:             # <<<<<<<<<<<<<<
 *         cdef:
 *             GraphLink glink
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_link_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_glink);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":157
 *     # ##########################################################################
 *     # C LEVEL FUNC
 *     cdef Node* get_node_by_id_c(self, int id):             # <<<<<<<<<<<<<<
 *         return &self._graph_c.nodes[id]
 * 
 */

static isi::Node *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_node_by_id_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id) {
  isi::Node *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_by_id_c", 0);

  /* "data_structure/graph_c/graph.pyx":158
 *     # C LEVEL FUNC
 *     cdef Node* get_node_by_id_c(self, int id):
 *         return &self._graph_c.nodes[id]             # <<<<<<<<<<<<<<
 * 
 *     cdef Link* get_link_by_id_c(self, int id):
 */
  __pyx_r = (&(__pyx_v_self->_graph_c->nodes[__pyx_v_id]));
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":157
 *     # ##########################################################################
 *     # C LEVEL FUNC
 *     cdef Node* get_node_by_id_c(self, int id):             # <<<<<<<<<<<<<<
 *         return &self._graph_c.nodes[id]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":160
 *         return &self._graph_c.nodes[id]
 * 
 *     cdef Link* get_link_by_id_c(self, int id):             # <<<<<<<<<<<<<<
 *         return &self._graph_c.links[id]
 * 
 */

static isi::Link *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_link_by_id_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id) {
  isi::Link *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_link_by_id_c", 0);

  /* "data_structure/graph_c/graph.pyx":161
 * 
 *     cdef Link* get_link_by_id_c(self, int id):
 *         return &self._graph_c.links[id]             # <<<<<<<<<<<<<<
 * 
 *     cdef int get_n_nodes_c(self):
 */
  __pyx_r = (&(__pyx_v_self->_graph_c->links[__pyx_v_id]));
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":160
 *         return &self._graph_c.nodes[id]
 * 
 *     cdef Link* get_link_by_id_c(self, int id):             # <<<<<<<<<<<<<<
 *         return &self._graph_c.links[id]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":163
 *         return &self._graph_c.links[id]
 * 
 *     cdef int get_n_nodes_c(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_nodes
 * 
 */

static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_nodes_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_nodes_c", 0);

  /* "data_structure/graph_c/graph.pyx":164
 * 
 *     cdef int get_n_nodes_c(self):
 *         return self._graph_c.n_nodes             # <<<<<<<<<<<<<<
 * 
 *     cdef int get_n_links_c(self):
 */
  __pyx_r = __pyx_v_self->_graph_c->n_nodes;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":163
 *         return &self._graph_c.links[id]
 * 
 *     cdef int get_n_nodes_c(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_nodes
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":166
 *         return self._graph_c.n_nodes
 * 
 *     cdef int get_n_links_c(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_links
 * 
 */

static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_links_c(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_links_c", 0);

  /* "data_structure/graph_c/graph.pyx":167
 * 
 *     cdef int get_n_links_c(self):
 *         return self._graph_c.n_links             # <<<<<<<<<<<<<<
 * 
 *     # ##########################################################################
 */
  __pyx_r = __pyx_v_self->_graph_c->n_links;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":166
 *         return self._graph_c.n_nodes
 * 
 *     cdef int get_n_links_c(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_links
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":173
 * 
 *     @property
 *     def index_node_type(self): return self._graph_c.index_node_type             # <<<<<<<<<<<<<<
 *     @property
 *     def index_node_label(self): return self._graph_c.index_node_label
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_15index_node_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_15index_node_type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_15index_node_type___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_15index_node_type___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_graph_c->index_node_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.index_node_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":175
 *     def index_node_type(self): return self._graph_c.index_node_type
 *     @property
 *     def index_node_label(self): return self._graph_c.index_node_label             # <<<<<<<<<<<<<<
 *     @property
 *     def index_link_label(self): return self._graph_c.index_link_label
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_16index_node_label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_16index_node_label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_16index_node_label___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_16index_node_label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_graph_c->index_node_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.index_node_label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":177
 *     def index_node_label(self): return self._graph_c.index_node_label
 *     @property
 *     def index_link_label(self): return self._graph_c.index_link_label             # <<<<<<<<<<<<<<
 * 
 *     cpdef void set_name(self, string name):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_16index_link_label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_16index_link_label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_16index_link_label___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_16index_link_label___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_graph_c->index_link_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.index_link_label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":179
 *     def index_link_label(self): return self._graph_c.index_link_label
 * 
 *     cpdef void set_name(self, string name):             # <<<<<<<<<<<<<<
 *         self.name = name
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_7set_name(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static void __pyx_f_14data_structure_7graph_c_5graph_5Graph_set_name(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_name, int __pyx_skip_dispatch) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("set_name", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_7set_name)) {
      __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 179, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":180
 * 
 *     cpdef void set_name(self, string name):
 *         self.name = name             # <<<<<<<<<<<<<<
 * 
 *     cpdef int get_n_nodes(self):
 */
  __pyx_v_self->name = __pyx_v_name;

  /* "data_structure/graph_c/graph.pyx":179
 *     def index_link_label(self): return self._graph_c.index_link_label
 * 
 *     cpdef void set_name(self, string name):             # <<<<<<<<<<<<<<
 *         self.name = name
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.Graph.set_name", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_7set_name(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_7set_name(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  std::string __pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_name (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __pyx_convert_string_from_py_std__in_string(__pyx_arg_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.set_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_6set_name(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((std::string)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_6set_name(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_name", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_void_to_None(__pyx_f_14data_structure_7graph_c_5graph_5Graph_set_name(__pyx_v_self, __pyx_v_name, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.set_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":182
 *         self.name = name
 * 
 *     cpdef int get_n_nodes(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_nodes
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_9get_n_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_n_nodes", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_n_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_9get_n_nodes)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 182, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":183
 * 
 *     cpdef int get_n_nodes(self):
 *         return self._graph_c.n_nodes             # <<<<<<<<<<<<<<
 * 
 *     cpdef int get_n_links(self):
 */
  __pyx_r = __pyx_v_self->_graph_c->n_nodes;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":182
 *         self.name = name
 * 
 *     cpdef int get_n_nodes(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_nodes
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.Graph.get_n_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_9get_n_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_9get_n_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_8get_n_nodes(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_8get_n_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_n_nodes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_nodes(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_n_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":185
 *         return self._graph_c.n_nodes
 * 
 *     cpdef int get_n_links(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_links
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_11get_n_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("get_n_links", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_n_links); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_11get_n_links)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":186
 * 
 *     cpdef int get_n_links(self):
 *         return self._graph_c.n_links             # <<<<<<<<<<<<<<
 * 
 *     cpdef Graph clone(self, int estimated_n_nodes=-1, int estimated_n_links=-1):
 */
  __pyx_r = __pyx_v_self->_graph_c->n_links;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":185
 *         return self._graph_c.n_nodes
 * 
 *     cpdef int get_n_links(self):             # <<<<<<<<<<<<<<
 *         return self._graph_c.n_links
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.Graph.get_n_links", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_11get_n_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_11get_n_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_n_links (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_10get_n_links(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_10get_n_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_n_links", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_links(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_n_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":188
 *         return self._graph_c.n_links
 * 
 *     cpdef Graph clone(self, int estimated_n_nodes=-1, int estimated_n_links=-1):             # <<<<<<<<<<<<<<
 *         if estimated_n_nodes == -1 or estimated_n_links == -1:
 *             estimated_n_nodes = self._graph_c.n_nodes
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_13clone(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_f_14data_structure_7graph_c_5graph_5Graph_clone(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_14data_structure_7graph_c_5graph_5Graph_clone *__pyx_optional_args) {
  int __pyx_v_estimated_n_nodes = ((int)-1);
  int __pyx_v_estimated_n_links = ((int)-1);
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_g = 0;
  int __pyx_v_i;
  isi::Node *__pyx_v_node;
  isi::Link *__pyx_v_link;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("clone", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_estimated_n_nodes = __pyx_optional_args->estimated_n_nodes;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_estimated_n_links = __pyx_optional_args->estimated_n_links;
      }
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_clone); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_13clone)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_estimated_n_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_estimated_n_links); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_Graph))))) __PYX_ERR(0, 188, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":189
 * 
 *     cpdef Graph clone(self, int estimated_n_nodes=-1, int estimated_n_links=-1):
 *         if estimated_n_nodes == -1 or estimated_n_links == -1:             # <<<<<<<<<<<<<<
 *             estimated_n_nodes = self._graph_c.n_nodes
 *             estimated_n_links = self._graph_c.n_links
 */
  __pyx_t_10 = ((__pyx_v_estimated_n_nodes == -1L) != 0);
  if (!__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_estimated_n_links == -1L) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_9) {

    /* "data_structure/graph_c/graph.pyx":190
 *     cpdef Graph clone(self, int estimated_n_nodes=-1, int estimated_n_links=-1):
 *         if estimated_n_nodes == -1 or estimated_n_links == -1:
 *             estimated_n_nodes = self._graph_c.n_nodes             # <<<<<<<<<<<<<<
 *             estimated_n_links = self._graph_c.n_links
 * 
 */
    __pyx_t_7 = __pyx_v_self->_graph_c->n_nodes;
    __pyx_v_estimated_n_nodes = __pyx_t_7;

    /* "data_structure/graph_c/graph.pyx":191
 *         if estimated_n_nodes == -1 or estimated_n_links == -1:
 *             estimated_n_nodes = self._graph_c.n_nodes
 *             estimated_n_links = self._graph_c.n_links             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __pyx_t_7 = __pyx_v_self->_graph_c->n_links;
    __pyx_v_estimated_n_links = __pyx_t_7;

    /* "data_structure/graph_c/graph.pyx":189
 * 
 *     cpdef Graph clone(self, int estimated_n_nodes=-1, int estimated_n_links=-1):
 *         if estimated_n_nodes == -1 or estimated_n_links == -1:             # <<<<<<<<<<<<<<
 *             estimated_n_nodes = self._graph_c.n_nodes
 *             estimated_n_links = self._graph_c.n_links
 */
  }

  /* "data_structure/graph_c/graph.pyx":194
 * 
 *         cdef:
 *             Graph g = Graph(self.index_node_type, self.index_node_label, self.index_link_label, estimated_n_nodes, estimated_n_links, self.name)             # <<<<<<<<<<<<<<
 *             int i
 *             Node *node
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_node_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_node_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_link_label); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_estimated_n_nodes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_estimated_n_links); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyTuple_New(6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_8 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph), __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_g = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "data_structure/graph_c/graph.pyx":199
 *             Link *link
 * 
 *         for i in range(self._graph_c.n_nodes):             # <<<<<<<<<<<<<<
 *             node = &self._graph_c.nodes[i]
 *             g.real_add_new_node(GraphNode(), node.type, node.label)
 */
  __pyx_t_7 = __pyx_v_self->_graph_c->n_nodes;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "data_structure/graph_c/graph.pyx":200
 * 
 *         for i in range(self._graph_c.n_nodes):
 *             node = &self._graph_c.nodes[i]             # <<<<<<<<<<<<<<
 *             g.real_add_new_node(GraphNode(), node.type, node.label)
 * 
 */
    __pyx_v_node = (&(__pyx_v_self->_graph_c->nodes[__pyx_v_i]));

    /* "data_structure/graph_c/graph.pyx":201
 *         for i in range(self._graph_c.n_nodes):
 *             node = &self._graph_c.nodes[i]
 *             g.real_add_new_node(GraphNode(), node.type, node.label)             # <<<<<<<<<<<<<<
 * 
 *         for i in range(self._graph_c.n_links):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_g->__pyx_vtab)->real_add_new_node(__pyx_v_g, ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_3), __pyx_v_node->type, __pyx_v_node->label, 0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":203
 *             g.real_add_new_node(GraphNode(), node.type, node.label)
 * 
 *         for i in range(self._graph_c.n_links):             # <<<<<<<<<<<<<<
 *             link = &self._graph_c.links[i]
 *             g.real_add_new_link(GraphLink(), link.type, link.label, link.source_id, link.target_id)
 */
  __pyx_t_7 = __pyx_v_self->_graph_c->n_links;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_7; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "data_structure/graph_c/graph.pyx":204
 * 
 *         for i in range(self._graph_c.n_links):
 *             link = &self._graph_c.links[i]             # <<<<<<<<<<<<<<
 *             g.real_add_new_link(GraphLink(), link.type, link.label, link.source_id, link.target_id)
 *         return g
 */
    __pyx_v_link = (&(__pyx_v_self->_graph_c->links[__pyx_v_i]));

    /* "data_structure/graph_c/graph.pyx":205
 *         for i in range(self._graph_c.n_links):
 *             link = &self._graph_c.links[i]
 *             g.real_add_new_link(GraphLink(), link.type, link.label, link.source_id, link.target_id)             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_g->__pyx_vtab)->real_add_new_link(__pyx_v_g, ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_6), __pyx_v_link->type, __pyx_v_link->label, __pyx_v_link->source_id, __pyx_v_link->target_id, 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":206
 *             link = &self._graph_c.links[i]
 *             g.real_add_new_link(GraphLink(), link.type, link.label, link.source_id, link.target_id)
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphNode real_add_new_node(self, GraphNode gnode, NodeType type, string label):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = __pyx_v_g;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":188
 *         return self._graph_c.n_links
 * 
 *     cpdef Graph clone(self, int estimated_n_nodes=-1, int estimated_n_links=-1):             # <<<<<<<<<<<<<<
 *         if estimated_n_nodes == -1 or estimated_n_links == -1:
 *             estimated_n_nodes = self._graph_c.n_nodes
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_13clone(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_13clone(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_estimated_n_nodes;
  int __pyx_v_estimated_n_links;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clone (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_estimated_n_nodes,&__pyx_n_s_estimated_n_links,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimated_n_nodes);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_estimated_n_links);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "clone") < 0)) __PYX_ERR(0, 188, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_estimated_n_nodes = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_estimated_n_nodes == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
    } else {
      __pyx_v_estimated_n_nodes = ((int)-1);
    }
    if (values[1]) {
      __pyx_v_estimated_n_links = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_estimated_n_links == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
    } else {
      __pyx_v_estimated_n_links = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("clone", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 188, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_12clone(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_estimated_n_nodes, __pyx_v_estimated_n_links);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_12clone(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_estimated_n_nodes, int __pyx_v_estimated_n_links) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_14data_structure_7graph_c_5graph_5Graph_clone __pyx_t_2;
  __Pyx_RefNannySetupContext("clone", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 2;
  __pyx_t_2.estimated_n_nodes = __pyx_v_estimated_n_nodes;
  __pyx_t_2.estimated_n_links = __pyx_v_estimated_n_links;
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_14data_structure_7graph_c_5graph_Graph->clone(__pyx_v_self, 1, &__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":208
 *         return g
 * 
 *     cpdef GraphNode real_add_new_node(self, GraphNode gnode, NodeType type, string label):             # <<<<<<<<<<<<<<
 *         gnode._node = self.add_new_node_c(type, label)
 *         gnode._graph = self
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_15real_add_new_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_gnode, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  isi::Node *__pyx_t_9;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("real_add_new_node", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_real_add_new_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_15real_add_new_node)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __Pyx_PyInt_From_enum__isi_3a__3a_NodeType(__pyx_v_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_gnode), __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[4] = {__pyx_t_6, ((PyObject *)__pyx_v_gnode), __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_gnode));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_gnode));
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_gnode));
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 208, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":209
 * 
 *     cpdef GraphNode real_add_new_node(self, GraphNode gnode, NodeType type, string label):
 *         gnode._node = self.add_new_node_c(type, label)             # <<<<<<<<<<<<<<
 *         gnode._graph = self
 *         self.gnodes.append(gnode)
 */
  try {
    __pyx_t_9 = ((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->add_new_node_c(__pyx_v_self, __pyx_v_type, __pyx_v_label);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 209, __pyx_L1_error)
  }
  __pyx_v_gnode->_node = __pyx_t_9;

  /* "data_structure/graph_c/graph.pyx":210
 *     cpdef GraphNode real_add_new_node(self, GraphNode gnode, NodeType type, string label):
 *         gnode._node = self.add_new_node_c(type, label)
 *         gnode._graph = self             # <<<<<<<<<<<<<<
 *         self.gnodes.append(gnode)
 *         return gnode
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_gnode->_graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_gnode->_graph));
  __pyx_v_gnode->_graph = __pyx_v_self;

  /* "data_structure/graph_c/graph.pyx":211
 *         gnode._node = self.add_new_node_c(type, label)
 *         gnode._graph = self
 *         self.gnodes.append(gnode)             # <<<<<<<<<<<<<<
 *         return gnode
 * 
 */
  if (unlikely(__pyx_v_self->gnodes == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 211, __pyx_L1_error)
  }
  __pyx_t_10 = __Pyx_PyList_Append(__pyx_v_self->gnodes, ((PyObject *)__pyx_v_gnode)); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(0, 211, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":212
 *         gnode._graph = self
 *         self.gnodes.append(gnode)
 *         return gnode             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphLink real_add_new_link(self, GraphLink glink, LinkType type, string label, int source_id, int target_id):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_gnode));
  __pyx_r = __pyx_v_gnode;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":208
 *         return g
 * 
 *     cpdef GraphNode real_add_new_node(self, GraphNode gnode, NodeType type, string label):             # <<<<<<<<<<<<<<
 *         gnode._node = self.add_new_node_c(type, label)
 *         gnode._graph = self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.real_add_new_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_15real_add_new_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_15real_add_new_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_gnode = 0;
  enum isi::NodeType __pyx_v_type;
  std::string __pyx_v_label;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real_add_new_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_gnode,&__pyx_n_s_type,&__pyx_n_s_label,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_gnode)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("real_add_new_node", 1, 3, 3, 1); __PYX_ERR(0, 208, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("real_add_new_node", 1, 3, 3, 2); __PYX_ERR(0, 208, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "real_add_new_node") < 0)) __PYX_ERR(0, 208, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_gnode = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)values[0]);
    __pyx_v_type = ((enum isi::NodeType)__Pyx_PyInt_As_enum__isi_3a__3a_NodeType(values[1])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L3_error)
    __pyx_v_label = __pyx_convert_string_from_py_std__in_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("real_add_new_node", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 208, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.real_add_new_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gnode), __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode, 1, "gnode", 0))) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_14real_add_new_node(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_gnode, __pyx_v_type, __pyx_v_label);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_14real_add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_v_gnode, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("real_add_new_node", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_node(__pyx_v_self, __pyx_v_gnode, __pyx_v_type, __pyx_v_label, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.real_add_new_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":214
 *         return gnode
 * 
 *     cpdef GraphLink real_add_new_link(self, GraphLink glink, LinkType type, string label, int source_id, int target_id):             # <<<<<<<<<<<<<<
 *         glink._link = self.add_new_link_c(type, label, source_id, target_id)
 *         glink._graph = self
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_17real_add_new_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_glink, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  isi::Link *__pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("real_add_new_link", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_real_add_new_link); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_17real_add_new_link)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __Pyx_PyInt_From_enum__isi_3a__3a_LinkType(__pyx_v_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_source_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_target_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_7 = __pyx_t_1; __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[6] = {__pyx_t_8, ((PyObject *)__pyx_v_glink), __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[6] = {__pyx_t_8, ((PyObject *)__pyx_v_glink), __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 5+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(5+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_INCREF(((PyObject *)__pyx_v_glink));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_glink));
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, ((PyObject *)__pyx_v_glink));
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_9, __pyx_t_6);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink))))) __PYX_ERR(0, 214, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":215
 * 
 *     cpdef GraphLink real_add_new_link(self, GraphLink glink, LinkType type, string label, int source_id, int target_id):
 *         glink._link = self.add_new_link_c(type, label, source_id, target_id)             # <<<<<<<<<<<<<<
 *         glink._graph = self
 *         self.glinks.append(glink)
 */
  try {
    __pyx_t_11 = ((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->add_new_link_c(__pyx_v_self, __pyx_v_type, __pyx_v_label, __pyx_v_source_id, __pyx_v_target_id);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 215, __pyx_L1_error)
  }
  __pyx_v_glink->_link = __pyx_t_11;

  /* "data_structure/graph_c/graph.pyx":216
 *     cpdef GraphLink real_add_new_link(self, GraphLink glink, LinkType type, string label, int source_id, int target_id):
 *         glink._link = self.add_new_link_c(type, label, source_id, target_id)
 *         glink._graph = self             # <<<<<<<<<<<<<<
 *         self.glinks.append(glink)
 *         return glink
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_glink->_graph);
  __Pyx_DECREF(((PyObject *)__pyx_v_glink->_graph));
  __pyx_v_glink->_graph = __pyx_v_self;

  /* "data_structure/graph_c/graph.pyx":217
 *         glink._link = self.add_new_link_c(type, label, source_id, target_id)
 *         glink._graph = self
 *         self.glinks.append(glink)             # <<<<<<<<<<<<<<
 *         return glink
 * 
 */
  if (unlikely(__pyx_v_self->glinks == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
    __PYX_ERR(0, 217, __pyx_L1_error)
  }
  __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_self->glinks, ((PyObject *)__pyx_v_glink)); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 217, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":218
 *         glink._graph = self
 *         self.glinks.append(glink)
 *         return glink             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphNode add_new_node(self, NodeType type, string label):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_glink));
  __pyx_r = __pyx_v_glink;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":214
 *         return gnode
 * 
 *     cpdef GraphLink real_add_new_link(self, GraphLink glink, LinkType type, string label, int source_id, int target_id):             # <<<<<<<<<<<<<<
 *         glink._link = self.add_new_link_c(type, label, source_id, target_id)
 *         glink._graph = self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.real_add_new_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_17real_add_new_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_17real_add_new_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_glink = 0;
  enum isi::LinkType __pyx_v_type;
  std::string __pyx_v_label;
  int __pyx_v_source_id;
  int __pyx_v_target_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("real_add_new_link (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_glink,&__pyx_n_s_type,&__pyx_n_s_label,&__pyx_n_s_source_id,&__pyx_n_s_target_id,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_glink)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("real_add_new_link", 1, 5, 5, 1); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("real_add_new_link", 1, 5, 5, 2); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("real_add_new_link", 1, 5, 5, 3); __PYX_ERR(0, 214, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("real_add_new_link", 1, 5, 5, 4); __PYX_ERR(0, 214, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "real_add_new_link") < 0)) __PYX_ERR(0, 214, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_glink = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)values[0]);
    __pyx_v_type = ((enum isi::LinkType)__Pyx_PyInt_As_enum__isi_3a__3a_LinkType(values[1])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L3_error)
    __pyx_v_label = __pyx_convert_string_from_py_std__in_string(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L3_error)
    __pyx_v_source_id = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_source_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L3_error)
    __pyx_v_target_id = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_target_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 214, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("real_add_new_link", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 214, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.real_add_new_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_glink), __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink, 1, "glink", 0))) __PYX_ERR(0, 214, __pyx_L1_error)
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_16real_add_new_link(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_glink, __pyx_v_type, __pyx_v_label, __pyx_v_source_id, __pyx_v_target_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_16real_add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_v_glink, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("real_add_new_link", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_link(__pyx_v_self, __pyx_v_glink, __pyx_v_type, __pyx_v_label, __pyx_v_source_id, __pyx_v_target_id, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.real_add_new_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":220
 *         return glink
 * 
 *     cpdef GraphNode add_new_node(self, NodeType type, string label):             # <<<<<<<<<<<<<<
 *         return self.real_add_new_node(GraphNode(), type, label)
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_19add_new_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("add_new_node", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_new_node); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_19add_new_node)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __Pyx_PyInt_From_enum__isi_3a__3a_NodeType(__pyx_v_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_7 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_6) {
          __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 220, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":221
 * 
 *     cpdef GraphNode add_new_node(self, NodeType type, string label):
 *         return self.real_add_new_node(GraphNode(), type, label)             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphLink add_new_link(self, LinkType type, string label, int source_id, int target_id):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->real_add_new_node(__pyx_v_self, ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_1), __pyx_v_type, __pyx_v_label, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":220
 *         return glink
 * 
 *     cpdef GraphNode add_new_node(self, NodeType type, string label):             # <<<<<<<<<<<<<<
 *         return self.real_add_new_node(GraphNode(), type, label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_19add_new_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_19add_new_node(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  enum isi::NodeType __pyx_v_type;
  std::string __pyx_v_label;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_new_node (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_label,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_new_node", 1, 2, 2, 1); __PYX_ERR(0, 220, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_new_node") < 0)) __PYX_ERR(0, 220, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_type = ((enum isi::NodeType)__Pyx_PyInt_As_enum__isi_3a__3a_NodeType(values[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L3_error)
    __pyx_v_label = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 220, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_new_node", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 220, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_18add_new_node(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_type, __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_18add_new_node(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::NodeType __pyx_v_type, std::string __pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_new_node", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_node(__pyx_v_self, __pyx_v_type, __pyx_v_label, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":223
 *         return self.real_add_new_node(GraphNode(), type, label)
 * 
 *     cpdef GraphLink add_new_link(self, LinkType type, string label, int source_id, int target_id):             # <<<<<<<<<<<<<<
 *         return self.real_add_new_link(GraphLink(), type, label, source_id, target_id)
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_21add_new_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("add_new_link", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_new_link); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_21add_new_link)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __Pyx_PyInt_From_enum__isi_3a__3a_LinkType(__pyx_v_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_source_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_target_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 223, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_7 = __pyx_t_1; __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_9 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 4+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[5] = {__pyx_t_8, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_9, 4+__pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_10 = PyTuple_New(4+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (__pyx_t_8) {
          __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_9, __pyx_t_6);
        __pyx_t_3 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_t_6 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink))))) __PYX_ERR(0, 223, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":224
 * 
 *     cpdef GraphLink add_new_link(self, LinkType type, string label, int source_id, int target_id):
 *         return self.real_add_new_link(GraphLink(), type, label, source_id, target_id)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint has_node_with_id(self, int id):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->real_add_new_link(__pyx_v_self, ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_1), __pyx_v_type, __pyx_v_label, __pyx_v_source_id, __pyx_v_target_id, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":223
 *         return self.real_add_new_node(GraphNode(), type, label)
 * 
 *     cpdef GraphLink add_new_link(self, LinkType type, string label, int source_id, int target_id):             # <<<<<<<<<<<<<<
 *         return self.real_add_new_link(GraphLink(), type, label, source_id, target_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_21add_new_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_21add_new_link(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  enum isi::LinkType __pyx_v_type;
  std::string __pyx_v_label;
  int __pyx_v_source_id;
  int __pyx_v_target_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_new_link (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type,&__pyx_n_s_label,&__pyx_n_s_source_id,&__pyx_n_s_target_id,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_new_link", 1, 4, 4, 1); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_new_link", 1, 4, 4, 2); __PYX_ERR(0, 223, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_new_link", 1, 4, 4, 3); __PYX_ERR(0, 223, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_new_link") < 0)) __PYX_ERR(0, 223, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_type = ((enum isi::LinkType)__Pyx_PyInt_As_enum__isi_3a__3a_LinkType(values[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L3_error)
    __pyx_v_label = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L3_error)
    __pyx_v_source_id = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_source_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L3_error)
    __pyx_v_target_id = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_target_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_new_link", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_20add_new_link(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_type, __pyx_v_label, __pyx_v_source_id, __pyx_v_target_id);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_20add_new_link(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, enum isi::LinkType __pyx_v_type, std::string __pyx_v_label, int __pyx_v_source_id, int __pyx_v_target_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_new_link", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_link(__pyx_v_self, __pyx_v_type, __pyx_v_label, __pyx_v_source_id, __pyx_v_target_id, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.add_new_link", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":226
 *         return self.real_add_new_link(GraphLink(), type, label, source_id, target_id)
 * 
 *     cpdef bint has_node_with_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self._graph_c.has_node_with_id(id)
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_23has_node_with_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_has_node_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("has_node_with_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_node_with_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_23has_node_with_id)) {
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 226, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_7;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":227
 * 
 *     cpdef bint has_node_with_id(self, int id):
 *         return self._graph_c.has_node_with_id(id)             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint has_link_with_id(self, int id):
 */
  __pyx_r = __pyx_v_self->_graph_c->has_node_with_id(__pyx_v_id);
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":226
 *         return self.real_add_new_link(GraphLink(), type, label, source_id, target_id)
 * 
 *     cpdef bint has_node_with_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self._graph_c.has_node_with_id(id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.Graph.has_node_with_id", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_23has_node_with_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_23has_node_with_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_node_with_id (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 226, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.has_node_with_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_22has_node_with_id(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_22has_node_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("has_node_with_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_14data_structure_7graph_c_5graph_5Graph_has_node_with_id(__pyx_v_self, __pyx_v_id, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.has_node_with_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":229
 *         return self._graph_c.has_node_with_id(id)
 * 
 *     cpdef bint has_link_with_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self._graph_c.has_link_with_id(id)
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_25has_link_with_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_has_link_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("has_link_with_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_has_link_with_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_25has_link_with_id)) {
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_7;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":230
 * 
 *     cpdef bint has_link_with_id(self, int id):
 *         return self._graph_c.has_link_with_id(id)             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphNode get_node_by_id(self, int id):
 */
  __pyx_r = __pyx_v_self->_graph_c->has_link_with_id(__pyx_v_id);
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":229
 *         return self._graph_c.has_node_with_id(id)
 * 
 *     cpdef bint has_link_with_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self._graph_c.has_link_with_id(id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.Graph.has_link_with_id", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_25has_link_with_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_25has_link_with_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_link_with_id (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.has_link_with_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_24has_link_with_id(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_24has_link_with_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("has_link_with_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_14data_structure_7graph_c_5graph_5Graph_has_link_with_id(__pyx_v_self, __pyx_v_id, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.has_link_with_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":232
 *         return self._graph_c.has_link_with_id(id)
 * 
 *     cpdef GraphNode get_node_by_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self.gnodes[id]
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_27get_node_by_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_node_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("get_node_by_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_node_by_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_27get_node_by_id)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 232, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 232, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":233
 * 
 *     cpdef GraphNode get_node_by_id(self, int id):
 *         return self.gnodes[id]             # <<<<<<<<<<<<<<
 * 
 *     cpdef GraphLink get_link_by_id(self, int id):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (unlikely(__pyx_v_self->gnodes == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 233, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->gnodes, __pyx_v_id, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode))))) __PYX_ERR(0, 233, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":232
 *         return self._graph_c.has_link_with_id(id)
 * 
 *     cpdef GraphNode get_node_by_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self.gnodes[id]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_node_by_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_27get_node_by_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_27get_node_by_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_by_id (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_node_by_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_26get_node_by_id(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_26get_node_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_node_by_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_node_by_id(__pyx_v_self, __pyx_v_id, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_node_by_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":235
 *         return self.gnodes[id]
 * 
 *     cpdef GraphLink get_link_by_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self.glinks[id]
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_29get_link_by_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_link_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id, int __pyx_skip_dispatch) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("get_link_by_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_link_by_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_29get_link_by_id)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1; __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
          PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink))))) __PYX_ERR(0, 235, __pyx_L1_error)
      __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":236
 * 
 *     cpdef GraphLink get_link_by_id(self, int id):
 *         return self.glinks[id]             # <<<<<<<<<<<<<<
 * 
 *     cpdef list iter_nodes(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (unlikely(__pyx_v_self->glinks == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 236, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->glinks, __pyx_v_id, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink))))) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":235
 *         return self.gnodes[id]
 * 
 *     cpdef GraphLink get_link_by_id(self, int id):             # <<<<<<<<<<<<<<
 *         return self.glinks[id]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_link_by_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_29get_link_by_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_29get_link_by_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_id) {
  int __pyx_v_id;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_link_by_id (wrapper)", 0);
  assert(__pyx_arg_id); {
    __pyx_v_id = __Pyx_PyInt_As_int(__pyx_arg_id); if (unlikely((__pyx_v_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_link_by_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_28get_link_by_id(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((int)__pyx_v_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_28get_link_by_id(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_link_by_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_link_by_id(__pyx_v_self, __pyx_v_id, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.get_link_by_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":238
 *         return self.glinks[id]
 * 
 *     cpdef list iter_nodes(self):             # <<<<<<<<<<<<<<
 *         return self.gnodes
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_31iter_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("iter_nodes", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_nodes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_31iter_nodes)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 238, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":239
 * 
 *     cpdef list iter_nodes(self):
 *         return self.gnodes             # <<<<<<<<<<<<<<
 * 
 *     cpdef list iter_links(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->gnodes);
  __pyx_r = __pyx_v_self->gnodes;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":238
 *         return self.glinks[id]
 * 
 *     cpdef list iter_nodes(self):             # <<<<<<<<<<<<<<
 *         return self.gnodes
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_31iter_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_31iter_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_30iter_nodes(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_30iter_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("iter_nodes", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_nodes(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":241
 *         return self.gnodes
 * 
 *     cpdef list iter_links(self):             # <<<<<<<<<<<<<<
 *         return self.glinks
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_33iter_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("iter_links", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_iter_links); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_33iter_links)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 241, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":242
 * 
 *     cpdef list iter_links(self):
 *         return self.glinks             # <<<<<<<<<<<<<<
 * 
 *     def iter_class_nodes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->glinks);
  __pyx_r = __pyx_v_self->glinks;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":241
 *         return self.gnodes
 * 
 *     cpdef list iter_links(self):             # <<<<<<<<<<<<<<
 *         return self.glinks
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_33iter_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_33iter_links(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_links (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_32iter_links(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_32iter_links(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("iter_links", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_links(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_links", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_36generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "data_structure/graph_c/graph.pyx":244
 *         return self.glinks
 * 
 *     def iter_class_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_35iter_class_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_35iter_class_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_class_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_34iter_class_nodes(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_34iter_class_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_class_nodes", 0);
  __pyx_cur_scope = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *)__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes(__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 244, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14data_structure_7graph_c_5graph_5Graph_36generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_class_nodes, __pyx_n_s_Graph_iter_class_nodes, __pyx_n_s_data_structure_graph_c_graph); if (unlikely(!gen)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_class_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_36generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *__pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  std::vector<int>  *__pyx_t_2;
  std::vector<int> ::size_type __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_class_nodes", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 244, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":249
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_node_type:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"
 */
  __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_node_type != 0)) != 0);
  if (__pyx_t_1) {

    /* "data_structure/graph_c/graph.pyx":251
 *         if not self._graph_c.index_node_type:
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"             # <<<<<<<<<<<<<<
 * 
 *         id_array = self._graph_c.class_node_index
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_node_type != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Must_be_indexed_before_invoking);
        __PYX_ERR(0, 251, __pyx_L1_error)
      }
    }
    #endif

    /* "data_structure/graph_c/graph.pyx":249
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_node_type:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"
 */
  }

  /* "data_structure/graph_c/graph.pyx":253
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"
 * 
 *         id_array = self._graph_c.class_node_index             # <<<<<<<<<<<<<<
 *         for i in range(id_array.size()):
 *             yield self.gnodes[<int> deref(id_array)[i]]
 */
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_self->_graph_c->class_node_index;
  __pyx_cur_scope->__pyx_v_id_array = __pyx_t_2;

  /* "data_structure/graph_c/graph.pyx":254
 * 
 *         id_array = self._graph_c.class_node_index
 *         for i in range(id_array.size()):             # <<<<<<<<<<<<<<
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_id_array->size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_4;

    /* "data_structure/graph_c/graph.pyx":255
 *         id_array = self._graph_c.class_node_index
 *         for i in range(id_array.size()):
 *             yield self.gnodes[<int> deref(id_array)[i]]             # <<<<<<<<<<<<<<
 * 
 *     def iter_data_nodes(self):
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->gnodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 255, __pyx_L1_error)
    }
    __pyx_t_5 = ((int)((*__pyx_cur_scope->__pyx_v_id_array)[__pyx_cur_scope->__pyx_v_i]));
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_self->gnodes, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 255, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "data_structure/graph_c/graph.pyx":244
 *         return self.glinks
 * 
 *     def iter_class_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("iter_class_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_39generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "data_structure/graph_c/graph.pyx":257
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_data_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_38iter_data_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_38iter_data_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_data_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_37iter_data_nodes(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_37iter_data_nodes(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_data_nodes", 0);
  __pyx_cur_scope = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *)__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes(__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 257, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14data_structure_7graph_c_5graph_5Graph_39generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_data_nodes, __pyx_n_s_Graph_iter_data_nodes, __pyx_n_s_data_structure_graph_c_graph); if (unlikely(!gen)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_data_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_39generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *__pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  std::vector<int>  *__pyx_t_2;
  std::vector<int> ::size_type __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_data_nodes", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 257, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":262
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_node_type:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"
 */
  __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_node_type != 0)) != 0);
  if (__pyx_t_1) {

    /* "data_structure/graph_c/graph.pyx":264
 *         if not self._graph_c.index_node_type:
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"             # <<<<<<<<<<<<<<
 * 
 *         id_array = self._graph_c.data_node_index
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_node_type != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Must_be_indexed_before_invoking);
        __PYX_ERR(0, 264, __pyx_L1_error)
      }
    }
    #endif

    /* "data_structure/graph_c/graph.pyx":262
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_node_type:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"
 */
  }

  /* "data_structure/graph_c/graph.pyx":266
 *             assert self._graph_c.index_node_type, "Must be indexed before invoking"
 * 
 *         id_array = self._graph_c.data_node_index             # <<<<<<<<<<<<<<
 *         for i in range(id_array.size()):
 *             yield self.gnodes[<int> deref(id_array)[i]]
 */
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_self->_graph_c->data_node_index;
  __pyx_cur_scope->__pyx_v_id_array = __pyx_t_2;

  /* "data_structure/graph_c/graph.pyx":267
 * 
 *         id_array = self._graph_c.data_node_index
 *         for i in range(id_array.size()):             # <<<<<<<<<<<<<<
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 */
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_id_array->size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_4;

    /* "data_structure/graph_c/graph.pyx":268
 *         id_array = self._graph_c.data_node_index
 *         for i in range(id_array.size()):
 *             yield self.gnodes[<int> deref(id_array)[i]]             # <<<<<<<<<<<<<<
 * 
 *     def iter_nodes_by_label(self, string label):
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->gnodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 268, __pyx_L1_error)
    }
    __pyx_t_5 = ((int)((*__pyx_cur_scope->__pyx_v_id_array)[__pyx_cur_scope->__pyx_v_i]));
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_self->gnodes, __pyx_t_5, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 268, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "data_structure/graph_c/graph.pyx":257
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_data_nodes(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("iter_data_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_42generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "data_structure/graph_c/graph.pyx":270
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_nodes_by_label(self, string label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_41iter_nodes_by_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_label); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_41iter_nodes_by_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_label) {
  std::string __pyx_v_label;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_nodes_by_label (wrapper)", 0);
  assert(__pyx_arg_label); {
    __pyx_v_label = __pyx_convert_string_from_py_std__in_string(__pyx_arg_label); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 270, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_nodes_by_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_40iter_nodes_by_label(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((std::string)__pyx_v_label));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_40iter_nodes_by_label(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_label) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_nodes_by_label", 0);
  __pyx_cur_scope = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *)__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label(__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 270, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_label = __pyx_v_label;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14data_structure_7graph_c_5graph_5Graph_42generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_nodes_by_label, __pyx_n_s_Graph_iter_nodes_by_label, __pyx_n_s_data_structure_graph_c_graph); if (unlikely(!gen)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_nodes_by_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_42generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *__pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  std::vector<int> ::size_type __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_nodes_by_label", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 270, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":275
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_node_label:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_label, "Must be indexed before invoking"
 */
  __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_node_label != 0)) != 0);
  if (__pyx_t_1) {

    /* "data_structure/graph_c/graph.pyx":277
 *         if not self._graph_c.index_node_label:
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_label, "Must be indexed before invoking"             # <<<<<<<<<<<<<<
 * 
 *         id_array = &deref(self._graph_c.node_index_label)[label]
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_node_label != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Must_be_indexed_before_invoking);
        __PYX_ERR(0, 277, __pyx_L1_error)
      }
    }
    #endif

    /* "data_structure/graph_c/graph.pyx":275
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_node_label:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_node_label, "Must be indexed before invoking"
 */
  }

  /* "data_structure/graph_c/graph.pyx":279
 *             assert self._graph_c.index_node_label, "Must be indexed before invoking"
 * 
 *         id_array = &deref(self._graph_c.node_index_label)[label]             # <<<<<<<<<<<<<<
 *         for i in range(id_array.size()):
 *             yield self.gnodes[<int> deref(id_array)[i]]
 */
  __pyx_cur_scope->__pyx_v_id_array = (&((*__pyx_cur_scope->__pyx_v_self->_graph_c->node_index_label)[__pyx_cur_scope->__pyx_v_label]));

  /* "data_structure/graph_c/graph.pyx":280
 * 
 *         id_array = &deref(self._graph_c.node_index_label)[label]
 *         for i in range(id_array.size()):             # <<<<<<<<<<<<<<
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 */
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_id_array->size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "data_structure/graph_c/graph.pyx":281
 *         id_array = &deref(self._graph_c.node_index_label)[label]
 *         for i in range(id_array.size()):
 *             yield self.gnodes[<int> deref(id_array)[i]]             # <<<<<<<<<<<<<<
 * 
 *     def iter_links_by_label(self, string label):
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->gnodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 281, __pyx_L1_error)
    }
    __pyx_t_4 = ((int)((*__pyx_cur_scope->__pyx_v_id_array)[__pyx_cur_scope->__pyx_v_i]));
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_self->gnodes, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 281, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "data_structure/graph_c/graph.pyx":270
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_nodes_by_label(self, string label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("iter_nodes_by_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_45generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "data_structure/graph_c/graph.pyx":283
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_links_by_label(self, string label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_44iter_links_by_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_label); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_44iter_links_by_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_label) {
  std::string __pyx_v_label;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_links_by_label (wrapper)", 0);
  assert(__pyx_arg_label); {
    __pyx_v_label = __pyx_convert_string_from_py_std__in_string(__pyx_arg_label); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 283, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_links_by_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_43iter_links_by_label(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((std::string)__pyx_v_label));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_43iter_links_by_label(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, std::string __pyx_v_label) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_links_by_label", 0);
  __pyx_cur_scope = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *)__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label(__pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 283, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_label = __pyx_v_label;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_14data_structure_7graph_c_5graph_5Graph_45generator5, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_links_by_label, __pyx_n_s_Graph_iter_links_by_label, __pyx_n_s_data_structure_graph_c_graph); if (unlikely(!gen)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.iter_links_by_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_14data_structure_7graph_c_5graph_5Graph_45generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *__pyx_cur_scope = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  std::vector<int> ::size_type __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iter_links_by_label", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 283, __pyx_L1_error)

  /* "data_structure/graph_c/graph.pyx":288
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_link_label:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_link_label, "Must be indexed before invoking"
 */
  __pyx_t_1 = ((!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_link_label != 0)) != 0);
  if (__pyx_t_1) {

    /* "data_structure/graph_c/graph.pyx":290
 *         if not self._graph_c.index_link_label:
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_link_label, "Must be indexed before invoking"             # <<<<<<<<<<<<<<
 * 
 *         id_array = &deref(self._graph_c.link_index_label)[label]
 */
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(!Py_OptimizeFlag)) {
      if (unlikely(!(__pyx_cur_scope->__pyx_v_self->_graph_c->index_link_label != 0))) {
        PyErr_SetObject(PyExc_AssertionError, __pyx_kp_s_Must_be_indexed_before_invoking);
        __PYX_ERR(0, 290, __pyx_L1_error)
      }
    }
    #endif

    /* "data_structure/graph_c/graph.pyx":288
 *             vector[int] *id_array
 * 
 *         if not self._graph_c.index_link_label:             # <<<<<<<<<<<<<<
 *             # to avoiding calling assert everytime
 *             assert self._graph_c.index_link_label, "Must be indexed before invoking"
 */
  }

  /* "data_structure/graph_c/graph.pyx":292
 *             assert self._graph_c.index_link_label, "Must be indexed before invoking"
 * 
 *         id_array = &deref(self._graph_c.link_index_label)[label]             # <<<<<<<<<<<<<<
 *         for i in range(id_array.size()):
 *             yield self.glinks[<int> deref(id_array)[i]]
 */
  __pyx_cur_scope->__pyx_v_id_array = (&((*__pyx_cur_scope->__pyx_v_self->_graph_c->link_index_label)[__pyx_cur_scope->__pyx_v_label]));

  /* "data_structure/graph_c/graph.pyx":293
 * 
 *         id_array = &deref(self._graph_c.link_index_label)[label]
 *         for i in range(id_array.size()):             # <<<<<<<<<<<<<<
 *             yield self.glinks[<int> deref(id_array)[i]]
 * 
 */
  __pyx_t_2 = __pyx_cur_scope->__pyx_v_id_array->size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "data_structure/graph_c/graph.pyx":294
 *         id_array = &deref(self._graph_c.link_index_label)[label]
 *         for i in range(id_array.size()):
 *             yield self.glinks[<int> deref(id_array)[i]]             # <<<<<<<<<<<<<<
 * 
 *     cpdef bint equal(self, Graph another):
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->glinks == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 294, __pyx_L1_error)
    }
    __pyx_t_4 = ((int)((*__pyx_cur_scope->__pyx_v_id_array)[__pyx_cur_scope->__pyx_v_i]));
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_cur_scope->__pyx_v_self->glinks, __pyx_t_4, int, 1, __Pyx_PyInt_From_int, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 294, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "data_structure/graph_c/graph.pyx":283
 *             yield self.gnodes[<int> deref(id_array)[i]]
 * 
 *     def iter_links_by_label(self, string label):             # <<<<<<<<<<<<<<
 *         cdef:
 *             unsigned int i
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("iter_links_by_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":296
 *             yield self.glinks[<int> deref(id_array)[i]]
 * 
 *     cpdef bint equal(self, Graph another):             # <<<<<<<<<<<<<<
 *         if self._graph_c.n_nodes != another._graph_c.n_nodes or self._graph_c.n_links != another._graph_c.n_links:
 *             return False
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_47equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another); /*proto*/
static int __pyx_f_14data_structure_7graph_c_5graph_5Graph_equal(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_another, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_link = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("equal", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_equal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_47equal)) {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_another)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      } else {
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_another)};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[2] = {__pyx_t_4, ((PyObject *)__pyx_v_another)};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_INCREF(((PyObject *)__pyx_v_another));
          __Pyx_GIVEREF(((PyObject *)__pyx_v_another));
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_another));
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 296, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_6;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":297
 * 
 *     cpdef bint equal(self, Graph another):
 *         if self._graph_c.n_nodes != another._graph_c.n_nodes or self._graph_c.n_links != another._graph_c.n_links:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  __pyx_t_7 = ((__pyx_v_self->_graph_c->n_nodes != __pyx_v_another->_graph_c->n_nodes) != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_7 = ((__pyx_v_self->_graph_c->n_links != __pyx_v_another->_graph_c->n_links) != 0);
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "data_structure/graph_c/graph.pyx":298
 *     cpdef bint equal(self, Graph another):
 *         if self._graph_c.n_nodes != another._graph_c.n_nodes or self._graph_c.n_links != another._graph_c.n_links:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *         for node in self.gnodes:
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "data_structure/graph_c/graph.pyx":297
 * 
 *     cpdef bint equal(self, Graph another):
 *         if self._graph_c.n_nodes != another._graph_c.n_nodes or self._graph_c.n_links != another._graph_c.n_links:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
  }

  /* "data_structure/graph_c/graph.pyx":300
 *             return False
 * 
 *         for node in self.gnodes:             # <<<<<<<<<<<<<<
 *             if not node.equal(another.gnodes[node.id]):
 *                 return False
 */
  if (unlikely(__pyx_v_self->gnodes == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 300, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->gnodes; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 300, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":301
 * 
 *         for node in self.gnodes:
 *             if not node.equal(another.gnodes[node.id]):             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_equal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_another->gnodes == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 301, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyObject_GetItem(__pyx_v_another->gnodes, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_5, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 301, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = ((!__pyx_t_6) != 0);
    if (__pyx_t_7) {

      /* "data_structure/graph_c/graph.pyx":302
 *         for node in self.gnodes:
 *             if not node.equal(another.gnodes[node.id]):
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *         for link in self.glinks:
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "data_structure/graph_c/graph.pyx":301
 * 
 *         for node in self.gnodes:
 *             if not node.equal(another.gnodes[node.id]):             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
    }

    /* "data_structure/graph_c/graph.pyx":300
 *             return False
 * 
 *         for node in self.gnodes:             # <<<<<<<<<<<<<<
 *             if not node.equal(another.gnodes[node.id]):
 *                 return False
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":304
 *                 return False
 * 
 *         for link in self.glinks:             # <<<<<<<<<<<<<<
 *             if not link.equal(another.glinks[link.id]):
 *                 return False
 */
  if (unlikely(__pyx_v_self->glinks == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 304, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->glinks; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 304, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_link, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":305
 * 
 *         for link in self.glinks:
 *             if not link.equal(another.glinks[link.id]):             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_link, __pyx_n_s_equal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_another->glinks == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 305, __pyx_L1_error)
    }
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_link, __pyx_n_s_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = PyObject_GetItem(__pyx_v_another->glinks, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[2] = {__pyx_t_9, __pyx_t_4};
        __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = ((!__pyx_t_7) != 0);
    if (__pyx_t_6) {

      /* "data_structure/graph_c/graph.pyx":306
 *         for link in self.glinks:
 *             if not link.equal(another.glinks[link.id]):
 *                 return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "data_structure/graph_c/graph.pyx":305
 * 
 *         for link in self.glinks:
 *             if not link.equal(another.glinks[link.id]):             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    }

    /* "data_structure/graph_c/graph.pyx":304
 *                 return False
 * 
 *         for link in self.glinks:             # <<<<<<<<<<<<<<
 *             if not link.equal(another.glinks[link.id]):
 *                 return False
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":307
 *             if not link.equal(another.glinks[link.id]):
 *                 return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cpdef dict to_dict(self):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":296
 *             yield self.glinks[<int> deref(id_array)[i]]
 * 
 *     cpdef bint equal(self, Graph another):             # <<<<<<<<<<<<<<
 *         if self._graph_c.n_nodes != another._graph_c.n_nodes or self._graph_c.n_links != another._graph_c.n_links:
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("data_structure.graph_c.graph.Graph.equal", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_link);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_47equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_47equal(PyObject *__pyx_v_self, PyObject *__pyx_v_another) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("equal (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_another), __pyx_ptype_14data_structure_7graph_c_5graph_Graph, 1, "another", 0))) __PYX_ERR(0, 296, __pyx_L1_error)
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_46equal(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_another));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_46equal(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_another) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("equal", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_14data_structure_7graph_c_5graph_5Graph_equal(__pyx_v_self, __pyx_v_another, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.equal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":309
 *         return True
 * 
 *     cpdef dict to_dict(self):             # <<<<<<<<<<<<<<
 *         return graph2dict(self)
 * 
 */

static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_49to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_14data_structure_7graph_c_5graph_5Graph_to_dict(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("to_dict", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_to_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_49to_dict)) {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(PyDict_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 309, __pyx_L1_error)
      __pyx_r = ((PyObject*)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "data_structure/graph_c/graph.pyx":310
 * 
 *     cpdef dict to_dict(self):
 *         return graph2dict(self)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_graph2dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-1, 1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "dict", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 310, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":309
 *         return True
 * 
 *     cpdef dict to_dict(self):             # <<<<<<<<<<<<<<
 *         return graph2dict(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_49to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_49to_dict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_dict (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_48to_dict(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_48to_dict(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("to_dict", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_14data_structure_7graph_c_5graph_5Graph_to_dict(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":313
 * 
 *     @staticmethod
 *     def from_dict(dict obj) -> Graph:             # <<<<<<<<<<<<<<
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)
 * 
 */

/* Python wrapper */
static struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_51from_dict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14data_structure_7graph_c_5graph_5Graph_51from_dict = {"from_dict", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_51from_dict, METH_VARARGS|METH_KEYWORDS, 0};
static struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_51from_dict(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_dict (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "from_dict") < 0)) __PYX_ERR(0, 313, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_obj = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("from_dict", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_obj), (&PyDict_Type), 1, "obj", 1))) __PYX_ERR(0, 313, __pyx_L1_error)
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_50from_dict(__pyx_v_obj);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_50from_dict(PyObject *__pyx_v_obj) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("from_dict", 0);

  /* "data_structure/graph_c/graph.pyx":314
 *     @staticmethod
 *     def from_dict(dict obj) -> Graph:
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)             # <<<<<<<<<<<<<<
 * 
 *     def render(self, int dpi=50, int max_text_width=15) -> None:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_dict2graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_obj, ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph), ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode), ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink)};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[5] = {__pyx_t_3, __pyx_v_obj, ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph), ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode), ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink)};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_4, 4+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(4+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(__pyx_v_obj);
    __Pyx_GIVEREF(__pyx_v_obj);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_obj);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph));
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph));
    __Pyx_INCREF(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode));
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphNode));
    __Pyx_INCREF(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink));
    PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_4, ((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_GraphLink));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_14data_structure_7graph_c_5graph_Graph))))) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":313
 * 
 *     @staticmethod
 *     def from_dict(dict obj) -> Graph:             # <<<<<<<<<<<<<<
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.from_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":316
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)
 * 
 *     def render(self, int dpi=50, int max_text_width=15) -> None:             # <<<<<<<<<<<<<<
 *         render_graph(self, dpi, max_text_width)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_53render(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_53render(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_dpi;
  int __pyx_v_max_text_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dpi,&__pyx_n_s_max_text_width,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dpi);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_text_width);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "render") < 0)) __PYX_ERR(0, 316, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_dpi = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_dpi == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L3_error)
    } else {
      __pyx_v_dpi = ((int)50);
    }
    if (values[1]) {
      __pyx_v_max_text_width = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_max_text_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L3_error)
    } else {
      __pyx_v_max_text_width = ((int)15);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("render", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 316, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_52render(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_dpi, __pyx_v_max_text_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_52render(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, int __pyx_v_dpi, int __pyx_v_max_text_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("render", 0);

  /* "data_structure/graph_c/graph.pyx":317
 * 
 *     def render(self, int dpi=50, int max_text_width=15) -> None:
 *         render_graph(self, dpi, max_text_width)             # <<<<<<<<<<<<<<
 * 
 *     def render2img(self, f_output, int max_text_width=15) -> None:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_render_graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dpi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_6, 3+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(3+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_6, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":316
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)
 * 
 *     def render(self, int dpi=50, int max_text_width=15) -> None:             # <<<<<<<<<<<<<<
 *         render_graph(self, dpi, max_text_width)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.render", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":319
 *         render_graph(self, dpi, max_text_width)
 * 
 *     def render2img(self, f_output, int max_text_width=15) -> None:             # <<<<<<<<<<<<<<
 *         graph2img(self, f_output, max_text_width)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_55render2img(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_55render2img(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f_output = 0;
  int __pyx_v_max_text_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render2img (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f_output,&__pyx_n_s_max_text_width,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_text_width);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "render2img") < 0)) __PYX_ERR(0, 319, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_f_output = values[0];
    if (values[1]) {
      __pyx_v_max_text_width = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_max_text_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L3_error)
    } else {
      __pyx_v_max_text_width = ((int)15);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("render2img", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 319, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.render2img", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_54render2img(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_f_output, __pyx_v_max_text_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_54render2img(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, PyObject *__pyx_v_f_output, int __pyx_v_max_text_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("render2img", 0);

  /* "data_structure/graph_c/graph.pyx":320
 * 
 *     def render2img(self, f_output, int max_text_width=15) -> None:
 *         graph2img(self, f_output, max_text_width)             # <<<<<<<<<<<<<<
 * 
 *     def render2pdf(self, f_output, int max_text_width=15) -> None:
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_graph2img); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_self), __pyx_v_f_output, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_self), __pyx_v_f_output, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_f_output);
    __Pyx_GIVEREF(__pyx_v_f_output);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_f_output);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":319
 *         render_graph(self, dpi, max_text_width)
 * 
 *     def render2img(self, f_output, int max_text_width=15) -> None:             # <<<<<<<<<<<<<<
 *         graph2img(self, f_output, max_text_width)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.render2img", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":322
 *         graph2img(self, f_output, max_text_width)
 * 
 *     def render2pdf(self, f_output, int max_text_width=15) -> None:             # <<<<<<<<<<<<<<
 *         graph2pdf(self, f_output, max_text_width)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_57render2pdf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_57render2pdf(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f_output = 0;
  int __pyx_v_max_text_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("render2pdf (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f_output,&__pyx_n_s_max_text_width,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f_output)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_text_width);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "render2pdf") < 0)) __PYX_ERR(0, 322, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_f_output = values[0];
    if (values[1]) {
      __pyx_v_max_text_width = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_max_text_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L3_error)
    } else {
      __pyx_v_max_text_width = ((int)15);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("render2pdf", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.render2pdf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_56render2pdf(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), __pyx_v_f_output, __pyx_v_max_text_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_56render2pdf(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, PyObject *__pyx_v_f_output, int __pyx_v_max_text_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("render2pdf", 0);

  /* "data_structure/graph_c/graph.pyx":323
 * 
 *     def render2pdf(self, f_output, int max_text_width=15) -> None:
 *         graph2pdf(self, f_output, max_text_width)             # <<<<<<<<<<<<<<
 * 
 *     # implement pickling, notice that it doesn't work with sub-classes
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_graph2pdf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_max_text_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_self), __pyx_v_f_output, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[4] = {__pyx_t_4, ((PyObject *)__pyx_v_self), __pyx_v_f_output, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_f_output);
    __Pyx_GIVEREF(__pyx_v_f_output);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_f_output);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":322
 *         graph2img(self, f_output, max_text_width)
 * 
 *     def render2pdf(self, f_output, int max_text_width=15) -> None:             # <<<<<<<<<<<<<<
 *         graph2pdf(self, f_output, max_text_width)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.render2pdf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":326
 * 
 *     # implement pickling, notice that it doesn't work with sub-classes
 *     def __getnewargs__(self):             # <<<<<<<<<<<<<<
 *         return self.index_node_type, self.index_node_label, self.index_link_label, self.get_n_nodes_c(), self.get_n_links_c()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_59__getnewargs__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_59__getnewargs__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getnewargs__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_58__getnewargs__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_58__getnewargs__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__getnewargs__", 0);

  /* "data_structure/graph_c/graph.pyx":327
 *     # implement pickling, notice that it doesn't work with sub-classes
 *     def __getnewargs__(self):
 *         return self.index_node_type, self.index_node_label, self.index_link_label, self.get_n_nodes_c(), self.get_n_links_c()             # <<<<<<<<<<<<<<
 * 
 *     def __getstate__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_node_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_node_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_index_link_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->get_n_nodes_c(__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->get_n_links_c(__pyx_v_self)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":326
 * 
 *     # implement pickling, notice that it doesn't work with sub-classes
 *     def __getnewargs__(self):             # <<<<<<<<<<<<<<
 *         return self.index_node_type, self.index_node_label, self.index_link_label, self.get_n_nodes_c(), self.get_n_links_c()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__getnewargs__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":329
 *         return self.index_node_type, self.index_node_label, self.index_link_label, self.get_n_nodes_c(), self.get_n_links_c()
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         nodes = [
 *             (node.id, node.type, node.label) for node in self.iter_nodes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_61__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_61__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_60__getstate__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_60__getstate__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_v_nodes = NULL;
  PyObject *__pyx_v_links = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_link = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "data_structure/graph_c/graph.pyx":330
 * 
 *     def __getstate__(self):
 *         nodes = [             # <<<<<<<<<<<<<<
 *             (node.id, node.type, node.label) for node in self.iter_nodes()
 *         ]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "data_structure/graph_c/graph.pyx":331
 *     def __getstate__(self):
 *         nodes = [
 *             (node.id, node.type, node.label) for node in self.iter_nodes()             # <<<<<<<<<<<<<<
 *         ]
 *         links = [
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->iter_nodes(__pyx_v_self, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 331, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 331, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":333
 *             (node.id, node.type, node.label) for node in self.iter_nodes()
 *         ]
 *         links = [             # <<<<<<<<<<<<<<
 *             (link.id, link.type, link.label, link.source_id, link.target_id) for link in self.iter_links()
 *         ]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "data_structure/graph_c/graph.pyx":334
 *         ]
 *         links = [
 *             (link.id, link.type, link.label, link.source_id, link.target_id) for link in self.iter_links()             # <<<<<<<<<<<<<<
 *         ]
 *         return nodes, links, self.name
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->iter_links(__pyx_v_self, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 334, __pyx_L1_error)
  }
  __pyx_t_7 = __pyx_t_3; __Pyx_INCREF(__pyx_t_7); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_7)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(0, 334, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_7, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_link, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_link, __pyx_n_s_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_link, __pyx_n_s_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_link, __pyx_n_s_label); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_link, __pyx_n_s_source_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_link, __pyx_n_s_target_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_links = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":336
 *             (link.id, link.type, link.label, link.source_id, link.target_id) for link in self.iter_links()
 *         ]
 *         return nodes, links, self.name             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self, state):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_nodes);
  __Pyx_GIVEREF(__pyx_v_nodes);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_nodes);
  __Pyx_INCREF(__pyx_v_links);
  __Pyx_GIVEREF(__pyx_v_links);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_links);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "data_structure/graph_c/graph.pyx":329
 *         return self.index_node_type, self.index_node_label, self.index_link_label, self.get_n_nodes_c(), self.get_n_links_c()
 * 
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         nodes = [
 *             (node.id, node.type, node.label) for node in self.iter_nodes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF(__pyx_v_links);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_link);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pyx":338
 *         return nodes, links, self.name
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         nodes, links, name = state
 *         assert self.get_n_nodes_c() == 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_63__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_63__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_62__setstate__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((PyObject *)__pyx_v_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_62__setstate__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, PyObject *__pyx_v_state) {
  PyObject *__pyx_v_nodes = NULL;
  PyObject *__pyx_v_links = NULL;
  PyObject *__pyx_v_name = NULL;
  PyObject *__pyx_v_node = NULL;
  PyObject *__pyx_v_link = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  std::string __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  enum isi::NodeType __pyx_t_9;
  enum isi::LinkType __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "data_structure/graph_c/graph.pyx":339
 * 
 *     def __setstate__(self, state):
 *         nodes, links, name = state             # <<<<<<<<<<<<<<
 *         assert self.get_n_nodes_c() == 0
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_state))) || (PyList_CheckExact(__pyx_v_state))) {
    PyObject* sequence = __pyx_v_state;
    #if !CYTHON_COMPILING_IN_PYPY
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 339, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_4 = PyObject_GetIter(__pyx_v_state); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = Py_TYPE(__pyx_t_4)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 2; __pyx_t_3 = __pyx_t_5(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_5(__pyx_t_4), 3) < 0) __PYX_ERR(0, 339, __pyx_L1_error)
    __pyx_t_5 = NULL;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 339, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_nodes = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_links = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_name = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "data_structure/graph_c/graph.pyx":340
 *     def __setstate__(self, state):
 *         nodes, links, name = state
 *         assert self.get_n_nodes_c() == 0             # <<<<<<<<<<<<<<
 * 
 *         # it doesn't invoke __init__, so we have to do it here
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->get_n_nodes_c(__pyx_v_self) == 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 340, __pyx_L1_error)
    }
  }
  #endif

  /* "data_structure/graph_c/graph.pyx":343
 * 
 *         # it doesn't invoke __init__, so we have to do it here
 *         self.name = name             # <<<<<<<<<<<<<<
 *         self.gnodes = []
 *         self.glinks = []
 */
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_name); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_v_self->name = __pyx_t_6;

  /* "data_structure/graph_c/graph.pyx":344
 *         # it doesn't invoke __init__, so we have to do it here
 *         self.name = name
 *         self.gnodes = []             # <<<<<<<<<<<<<<
 *         self.glinks = []
 * 
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->gnodes);
  __Pyx_DECREF(__pyx_v_self->gnodes);
  __pyx_v_self->gnodes = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "data_structure/graph_c/graph.pyx":345
 *         self.name = name
 *         self.gnodes = []
 *         self.glinks = []             # <<<<<<<<<<<<<<
 * 
 *         for node in nodes:
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->glinks);
  __Pyx_DECREF(__pyx_v_self->glinks);
  __pyx_v_self->glinks = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "data_structure/graph_c/graph.pyx":347
 *         self.glinks = []
 * 
 *         for node in nodes:             # <<<<<<<<<<<<<<
 *             self.add_new_node(node[1], node[2])
 *         for link in links:
 */
  if (likely(PyList_CheckExact(__pyx_v_nodes)) || PyTuple_CheckExact(__pyx_v_nodes)) {
    __pyx_t_3 = __pyx_v_nodes; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 347, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 347, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_node, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":348
 * 
 *         for node in nodes:
 *             self.add_new_node(node[1], node[2])             # <<<<<<<<<<<<<<
 *         for link in links:
 *             self.add_new_link(link[1], link[2], link[3], link[4])
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_node, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = ((enum isi::NodeType)__Pyx_PyInt_As_enum__isi_3a__3a_NodeType(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_node, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->add_new_node(__pyx_v_self, __pyx_t_9, __pyx_t_6, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":347
 *         self.glinks = []
 * 
 *         for node in nodes:             # <<<<<<<<<<<<<<
 *             self.add_new_node(node[1], node[2])
 *         for link in links:
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "data_structure/graph_c/graph.pyx":349
 *         for node in nodes:
 *             self.add_new_node(node[1], node[2])
 *         for link in links:             # <<<<<<<<<<<<<<
 *             self.add_new_link(link[1], link[2], link[3], link[4])
 */
  if (likely(PyList_CheckExact(__pyx_v_links)) || PyTuple_CheckExact(__pyx_v_links)) {
    __pyx_t_3 = __pyx_v_links; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_links); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 349, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 349, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 349, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 349, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_link, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":350
 *             self.add_new_node(node[1], node[2])
 *         for link in links:
 *             self.add_new_link(link[1], link[2], link[3], link[4])             # <<<<<<<<<<<<<<
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_link, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = ((enum isi::LinkType)__Pyx_PyInt_As_enum__isi_3a__3a_LinkType(__pyx_t_2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_link, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_link, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_link, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self->__pyx_vtab)->add_new_link(__pyx_v_self, __pyx_t_10, __pyx_t_6, __pyx_t_11, __pyx_t_12, 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "data_structure/graph_c/graph.pyx":349
 *         for node in nodes:
 *             self.add_new_node(node[1], node[2])
 *         for link in links:             # <<<<<<<<<<<<<<
 *             self.add_new_link(link[1], link[2], link[3], link[4])
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "data_structure/graph_c/graph.pyx":338
 *         return nodes, links, self.name
 * 
 *     def __setstate__(self, state):             # <<<<<<<<<<<<<<
 *         nodes, links, name = state
 *         assert self.get_n_nodes_c() == 0
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XDECREF(__pyx_v_links);
  __Pyx_XDECREF(__pyx_v_name);
  __Pyx_XDECREF(__pyx_v_node);
  __Pyx_XDECREF(__pyx_v_link);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "data_structure/graph_c/graph.pxd":97
 * cdef class Graph:
 *     cdef readonly:
 *         string name             # <<<<<<<<<<<<<<
 *     cdef:
 *         list gnodes
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_4name___get__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_4name___get__(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->name); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_65__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_64__reduce_cython__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_14data_structure_7graph_c_5graph_5Graph_67__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_14data_structure_7graph_c_5graph_5Graph_66__setstate_cython__(((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14data_structure_7graph_c_5graph_5Graph_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("data_structure.graph_c.graph.Graph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphNode __pyx_vtable_14data_structure_7graph_c_5graph_GraphNode;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph_GraphNode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)o);
  p->__pyx_vtab = __pyx_vtabptr_14data_structure_7graph_c_5graph_GraphNode;
  p->_graph = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph_GraphNode(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph_GraphNode(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)o;
  if (p->_graph) {
    e = (*v)(((PyObject *)p->_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14data_structure_7graph_c_5graph_GraphNode(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *)o;
  tmp = ((PyObject*)p->_graph);
  p->_graph = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_2id_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_4type_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5label_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_n_incoming_links(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_16n_incoming_links_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_n_outgoing_links(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_16n_outgoing_links_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode__graph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_6_graph_1__get__(o);
}

static PyMethodDef __pyx_methods_14data_structure_7graph_c_5graph_GraphNode[] = {
  {"is_data_node", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_1is_data_node, METH_NOARGS, 0},
  {"is_class_node", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_3is_class_node, METH_NOARGS, 0},
  {"equal", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_5equal, METH_O, 0},
  {"get_first_incoming_link", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_7get_first_incoming_link, METH_NOARGS, 0},
  {"iter_incoming_links", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_9iter_incoming_links, METH_NOARGS, 0},
  {"iter_outgoing_links", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_12iter_outgoing_links, METH_NOARGS, 0},
  {"get_printed_label", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_15get_printed_label, METH_O, 0},
  {"get_dot_format", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_17get_dot_format, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphNode_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14data_structure_7graph_c_5graph_GraphNode[] = {
  {(char *)"id", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_id, 0, (char *)0, 0},
  {(char *)"type", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_type, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_label, 0, (char *)0, 0},
  {(char *)"n_incoming_links", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_n_incoming_links, 0, (char *)0, 0},
  {(char *)"n_outgoing_links", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode_n_outgoing_links, 0, (char *)0, 0},
  {(char *)"_graph", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphNode__graph, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph_GraphNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.GraphNode", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph_GraphNode, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph_GraphNode, /*tp_traverse*/
  __pyx_tp_clear_14data_structure_7graph_c_5graph_GraphNode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14data_structure_7graph_c_5graph_GraphNode, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14data_structure_7graph_c_5graph_GraphNode, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph_GraphNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_GraphLink __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph_GraphLink(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)o);
  p->__pyx_vtab = __pyx_vtabptr_14data_structure_7graph_c_5graph_GraphLink;
  p->_graph = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph_GraphLink(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_graph);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph_GraphLink(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)o;
  if (p->_graph) {
    e = (*v)(((PyObject *)p->_graph), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14data_structure_7graph_c_5graph_GraphLink(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *)o;
  tmp = ((PyObject*)p->_graph);
  p->_graph = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_2id_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_4type_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5label_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_source_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9source_id_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_target_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9target_id_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink__graph(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_6_graph_1__get__(o);
}

static PyMethodDef __pyx_methods_14data_structure_7graph_c_5graph_GraphLink[] = {
  {"equal", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_1equal, METH_O, 0},
  {"get_source_node", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_3get_source_node, METH_NOARGS, 0},
  {"get_target_node", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_5get_target_node, METH_NOARGS, 0},
  {"get_printed_label", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_7get_printed_label, METH_O, 0},
  {"get_dot_format", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_9get_dot_format, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_9GraphLink_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14data_structure_7graph_c_5graph_GraphLink[] = {
  {(char *)"id", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_id, 0, (char *)0, 0},
  {(char *)"type", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_type, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_label, 0, (char *)0, 0},
  {(char *)"source_id", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_source_id, 0, (char *)0, 0},
  {(char *)"target_id", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink_target_id, 0, (char *)0, 0},
  {(char *)"_graph", __pyx_getprop_14data_structure_7graph_c_5graph_9GraphLink__graph, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph_GraphLink = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.GraphLink", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph_GraphLink, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph_GraphLink, /*tp_traverse*/
  __pyx_tp_clear_14data_structure_7graph_c_5graph_GraphLink, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14data_structure_7graph_c_5graph_GraphLink, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14data_structure_7graph_c_5graph_GraphLink, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph_GraphLink, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_14data_structure_7graph_c_5graph_Graph __pyx_vtable_14data_structure_7graph_c_5graph_Graph;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph_Graph(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)o);
  p->__pyx_vtab = __pyx_vtabptr_14data_structure_7graph_c_5graph_Graph;
  new((void*)&(p->name)) std::string();
  p->gnodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->glinks = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_14data_structure_7graph_c_5graph_5Graph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph_Graph(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_14data_structure_7graph_c_5graph_5Graph_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->name);
  Py_CLEAR(p->gnodes);
  Py_CLEAR(p->glinks);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph_Graph(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)o;
  if (p->gnodes) {
    e = (*v)(p->gnodes, a); if (e) return e;
  }
  if (p->glinks) {
    e = (*v)(p->glinks, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_14data_structure_7graph_c_5graph_Graph(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *p = (struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *)o;
  tmp = ((PyObject*)p->gnodes);
  p->gnodes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->glinks);
  p->glinks = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_5Graph_index_node_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_5Graph_15index_node_type_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_5Graph_index_node_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_5Graph_16index_node_label_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_5Graph_index_link_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_5Graph_16index_link_label_1__get__(o);
}

static PyObject *__pyx_getprop_14data_structure_7graph_c_5graph_5Graph_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_14data_structure_7graph_c_5graph_5Graph_4name_1__get__(o);
}

static PyMethodDef __pyx_methods_14data_structure_7graph_c_5graph_Graph[] = {
  {"set_name", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_7set_name, METH_O, 0},
  {"get_n_nodes", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_9get_n_nodes, METH_NOARGS, 0},
  {"get_n_links", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_11get_n_links, METH_NOARGS, 0},
  {"clone", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_13clone, METH_VARARGS|METH_KEYWORDS, 0},
  {"real_add_new_node", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_15real_add_new_node, METH_VARARGS|METH_KEYWORDS, 0},
  {"real_add_new_link", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_17real_add_new_link, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_new_node", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_19add_new_node, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_new_link", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_21add_new_link, METH_VARARGS|METH_KEYWORDS, 0},
  {"has_node_with_id", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_23has_node_with_id, METH_O, 0},
  {"has_link_with_id", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_25has_link_with_id, METH_O, 0},
  {"get_node_by_id", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_27get_node_by_id, METH_O, 0},
  {"get_link_by_id", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_29get_link_by_id, METH_O, 0},
  {"iter_nodes", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_31iter_nodes, METH_NOARGS, 0},
  {"iter_links", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_33iter_links, METH_NOARGS, 0},
  {"iter_class_nodes", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_35iter_class_nodes, METH_NOARGS, 0},
  {"iter_data_nodes", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_38iter_data_nodes, METH_NOARGS, 0},
  {"iter_nodes_by_label", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_41iter_nodes_by_label, METH_O, 0},
  {"iter_links_by_label", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_44iter_links_by_label, METH_O, 0},
  {"equal", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_47equal, METH_O, 0},
  {"to_dict", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_49to_dict, METH_NOARGS, 0},
  {"from_dict", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_51from_dict, METH_VARARGS|METH_KEYWORDS, 0},
  {"render", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_53render, METH_VARARGS|METH_KEYWORDS, 0},
  {"render2img", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_55render2img, METH_VARARGS|METH_KEYWORDS, 0},
  {"render2pdf", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_57render2pdf, METH_VARARGS|METH_KEYWORDS, 0},
  {"__getnewargs__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_59__getnewargs__, METH_NOARGS, 0},
  {"__getstate__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_61__getstate__, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_63__setstate__, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_65__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_14data_structure_7graph_c_5graph_5Graph_67__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_14data_structure_7graph_c_5graph_Graph[] = {
  {(char *)"index_node_type", __pyx_getprop_14data_structure_7graph_c_5graph_5Graph_index_node_type, 0, (char *)0, 0},
  {(char *)"index_node_label", __pyx_getprop_14data_structure_7graph_c_5graph_5Graph_index_node_label, 0, (char *)0, 0},
  {(char *)"index_link_label", __pyx_getprop_14data_structure_7graph_c_5graph_5Graph_index_link_label, 0, (char *)0, 0},
  {(char *)"name", __pyx_getprop_14data_structure_7graph_c_5graph_5Graph_name, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph_Graph = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.Graph", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph_Graph, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph_Graph, /*tp_traverse*/
  __pyx_tp_clear_14data_structure_7graph_c_5graph_Graph, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14data_structure_7graph_c_5graph_Graph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_14data_structure_7graph_c_5graph_Graph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_14data_structure_7graph_c_5graph_5Graph_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph_Graph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links[8];
static int __pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links = 0;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links)))) {
    o = (PyObject*)__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links[--__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links];
    memset(o, 0, sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links)))) {
    __pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links[__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links++] = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.__pyx_scope_struct__iter_incoming_links", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links[8];
static int __pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links = 0;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links)))) {
    o = (PyObject*)__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links[--__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links];
    memset(o, 0, sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links)))) {
    __pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links[__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links++] = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.__pyx_scope_struct_1_iter_outgoing_links", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes[8];
static int __pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes = 0;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes)))) {
    o = (PyObject*)__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes[--__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes];
    memset(o, 0, sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes)))) {
    __pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes[__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes++] = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.__pyx_scope_struct_2_iter_class_nodes", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes[8];
static int __pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes = 0;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes)))) {
    o = (PyObject*)__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes[--__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes];
    memset(o, 0, sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes)))) {
    __pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes[__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes++] = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.__pyx_scope_struct_3_iter_data_nodes", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label[8];
static int __pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label = 0;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label)))) {
    o = (PyObject*)__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label[--__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label];
    memset(o, 0, sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *)o);
  new((void*)&(p->__pyx_v_label)) std::string();
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_label);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label)))) {
    __pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label[__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label++] = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.__pyx_scope_struct_4_iter_nodes_by_label", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label[8];
static int __pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label = 0;

static PyObject *__pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label)))) {
    o = (PyObject*)__pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label[--__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label];
    memset(o, 0, sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *)o);
  new((void*)&(p->__pyx_v_label)) std::string();
  return o;
}

static void __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label(PyObject *o) {
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_label);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label)))) {
    __pyx_freelist_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label[__pyx_freecount_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label++] = ((struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *p = (struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label = {
  PyVarObject_HEAD_INIT(0, 0)
  "data_structure.graph_c.graph.__pyx_scope_struct_5_iter_links_by_label", /*tp_name*/
  sizeof(struct __pyx_obj_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_graph(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_graph},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "graph",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_GraphNode_iter_incoming_links, __pyx_k_GraphNode_iter_incoming_links, sizeof(__pyx_k_GraphNode_iter_incoming_links), 0, 0, 1, 1},
  {&__pyx_n_s_GraphNode_iter_outgoing_links, __pyx_k_GraphNode_iter_outgoing_links, sizeof(__pyx_k_GraphNode_iter_outgoing_links), 0, 0, 1, 1},
  {&__pyx_n_s_Graph_iter_class_nodes, __pyx_k_Graph_iter_class_nodes, sizeof(__pyx_k_Graph_iter_class_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_Graph_iter_data_nodes, __pyx_k_Graph_iter_data_nodes, sizeof(__pyx_k_Graph_iter_data_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_Graph_iter_links_by_label, __pyx_k_Graph_iter_links_by_label, sizeof(__pyx_k_Graph_iter_links_by_label), 0, 0, 1, 1},
  {&__pyx_n_s_Graph_iter_nodes_by_label, __pyx_k_Graph_iter_nodes_by_label, sizeof(__pyx_k_Graph_iter_nodes_by_label), 0, 0, 1, 1},
  {&__pyx_kp_s_L_03d_s, __pyx_k_L_03d_s, sizeof(__pyx_k_L_03d_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Must_be_indexed_before_invoking, __pyx_k_Must_be_indexed_before_invoking, sizeof(__pyx_k_Must_be_indexed_before_invoking), 0, 0, 1, 0},
  {&__pyx_kp_s_N_03d_s, __pyx_k_N_03d_s, sizeof(__pyx_k_N_03d_s), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_add_new_link, __pyx_k_add_new_link, sizeof(__pyx_k_add_new_link), 0, 0, 1, 1},
  {&__pyx_n_s_add_new_node, __pyx_k_add_new_node, sizeof(__pyx_k_add_new_node), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_auto_wrap, __pyx_k_auto_wrap, sizeof(__pyx_k_auto_wrap), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clone, __pyx_k_clone, sizeof(__pyx_k_clone), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_data_structure_graph_c_graph, __pyx_k_data_structure_graph_c_graph, sizeof(__pyx_k_data_structure_graph_c_graph), 0, 0, 1, 1},
  {&__pyx_n_s_data_structure_utilities, __pyx_k_data_structure_utilities, sizeof(__pyx_k_data_structure_utilities), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_dict2graph, __pyx_k_dict2graph, sizeof(__pyx_k_dict2graph), 0, 0, 1, 1},
  {&__pyx_n_s_dpi, __pyx_k_dpi, sizeof(__pyx_k_dpi), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_equal, __pyx_k_equal, sizeof(__pyx_k_equal), 0, 0, 1, 1},
  {&__pyx_n_s_estimated_n_links, __pyx_k_estimated_n_links, sizeof(__pyx_k_estimated_n_links), 0, 0, 1, 1},
  {&__pyx_n_s_estimated_n_nodes, __pyx_k_estimated_n_nodes, sizeof(__pyx_k_estimated_n_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_f_output, __pyx_k_f_output, sizeof(__pyx_k_f_output), 0, 0, 1, 1},
  {&__pyx_n_s_from_dict, __pyx_k_from_dict, sizeof(__pyx_k_from_dict), 0, 0, 1, 1},
  {&__pyx_n_s_get_dot_format, __pyx_k_get_dot_format, sizeof(__pyx_k_get_dot_format), 0, 0, 1, 1},
  {&__pyx_n_s_get_first_incoming_link, __pyx_k_get_first_incoming_link, sizeof(__pyx_k_get_first_incoming_link), 0, 0, 1, 1},
  {&__pyx_n_s_get_link_by_id, __pyx_k_get_link_by_id, sizeof(__pyx_k_get_link_by_id), 0, 0, 1, 1},
  {&__pyx_n_s_get_n_links, __pyx_k_get_n_links, sizeof(__pyx_k_get_n_links), 0, 0, 1, 1},
  {&__pyx_n_s_get_n_nodes, __pyx_k_get_n_nodes, sizeof(__pyx_k_get_n_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_get_node_by_id, __pyx_k_get_node_by_id, sizeof(__pyx_k_get_node_by_id), 0, 0, 1, 1},
  {&__pyx_n_s_get_printed_label, __pyx_k_get_printed_label, sizeof(__pyx_k_get_printed_label), 0, 0, 1, 1},
  {&__pyx_n_s_get_source_node, __pyx_k_get_source_node, sizeof(__pyx_k_get_source_node), 0, 0, 1, 1},
  {&__pyx_n_s_get_target_node, __pyx_k_get_target_node, sizeof(__pyx_k_get_target_node), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_glink, __pyx_k_glink, sizeof(__pyx_k_glink), 0, 0, 1, 1},
  {&__pyx_n_s_gnode, __pyx_k_gnode, sizeof(__pyx_k_gnode), 0, 0, 1, 1},
  {&__pyx_n_b_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 0, 1},
  {&__pyx_n_s_graph2dict, __pyx_k_graph2dict, sizeof(__pyx_k_graph2dict), 0, 0, 1, 1},
  {&__pyx_n_s_graph2img, __pyx_k_graph2img, sizeof(__pyx_k_graph2img), 0, 0, 1, 1},
  {&__pyx_n_s_graph2pdf, __pyx_k_graph2pdf, sizeof(__pyx_k_graph2pdf), 0, 0, 1, 1},
  {&__pyx_n_s_has_link_with_id, __pyx_k_has_link_with_id, sizeof(__pyx_k_has_link_with_id), 0, 0, 1, 1},
  {&__pyx_n_s_has_node_with_id, __pyx_k_has_node_with_id, sizeof(__pyx_k_has_node_with_id), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index_link_label, __pyx_k_index_link_label, sizeof(__pyx_k_index_link_label), 0, 0, 1, 1},
  {&__pyx_n_s_index_node_label, __pyx_k_index_node_label, sizeof(__pyx_k_index_node_label), 0, 0, 1, 1},
  {&__pyx_n_s_index_node_type, __pyx_k_index_node_type, sizeof(__pyx_k_index_node_type), 0, 0, 1, 1},
  {&__pyx_n_s_is_class_node, __pyx_k_is_class_node, sizeof(__pyx_k_is_class_node), 0, 0, 1, 1},
  {&__pyx_n_s_is_data_node, __pyx_k_is_data_node, sizeof(__pyx_k_is_data_node), 0, 0, 1, 1},
  {&__pyx_n_s_iter_class_nodes, __pyx_k_iter_class_nodes, sizeof(__pyx_k_iter_class_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_iter_data_nodes, __pyx_k_iter_data_nodes, sizeof(__pyx_k_iter_data_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_iter_incoming_links, __pyx_k_iter_incoming_links, sizeof(__pyx_k_iter_incoming_links), 0, 0, 1, 1},
  {&__pyx_n_s_iter_links, __pyx_k_iter_links, sizeof(__pyx_k_iter_links), 0, 0, 1, 1},
  {&__pyx_n_s_iter_links_by_label, __pyx_k_iter_links_by_label, sizeof(__pyx_k_iter_links_by_label), 0, 0, 1, 1},
  {&__pyx_n_s_iter_nodes, __pyx_k_iter_nodes, sizeof(__pyx_k_iter_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_iter_nodes_by_label, __pyx_k_iter_nodes_by_label, sizeof(__pyx_k_iter_nodes_by_label), 0, 0, 1, 1},
  {&__pyx_n_s_iter_outgoing_links, __pyx_k_iter_outgoing_links, sizeof(__pyx_k_iter_outgoing_links), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_text_width, __pyx_k_max_text_width, sizeof(__pyx_k_max_text_width), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_real_add_new_link, __pyx_k_real_add_new_link, sizeof(__pyx_k_real_add_new_link), 0, 0, 1, 1},
  {&__pyx_n_s_real_add_new_node, __pyx_k_real_add_new_node, sizeof(__pyx_k_real_add_new_node), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_render_graph, __pyx_k_render_graph, sizeof(__pyx_k_render_graph), 0, 0, 1, 1},
  {&__pyx_kp_s_s_s_color_brown_fontcolor_black, __pyx_k_s_s_color_brown_fontcolor_black, sizeof(__pyx_k_s_s_color_brown_fontcolor_black), 0, 0, 1, 0},
  {&__pyx_kp_s_s_shape_plaintext_style_filled, __pyx_k_s_shape_plaintext_style_filled, sizeof(__pyx_k_s_shape_plaintext_style_filled), 0, 0, 1, 0},
  {&__pyx_kp_s_s_style_filled_color_white_fill, __pyx_k_s_style_filled_color_white_fill, sizeof(__pyx_k_s_style_filled_color_white_fill), 0, 0, 1, 0},
  {&__pyx_kp_s_self__link_cannot_be_converted_t, __pyx_k_self__link_cannot_be_converted_t, sizeof(__pyx_k_self__link_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_kp_s_self__node_cannot_be_converted_t, __pyx_k_self__node_cannot_be_converted_t, sizeof(__pyx_k_self__node_cannot_be_converted_t), 0, 0, 1, 0},
  {&__pyx_n_s_semantic_modeling_algorithm_stri, __pyx_k_semantic_modeling_algorithm_stri, sizeof(__pyx_k_semantic_modeling_algorithm_stri), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_source_id, __pyx_k_source_id, sizeof(__pyx_k_source_id), 0, 0, 1, 1},
  {&__pyx_kp_s_src_data_structure_graph_c_graph, __pyx_k_src_data_structure_graph_c_graph, sizeof(__pyx_k_src_data_structure_graph_c_graph), 0, 0, 1, 0},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_target_id, __pyx_k_target_id, sizeof(__pyx_k_target_id), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_to_dict, __pyx_k_to_dict, sizeof(__pyx_k_to_dict), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_unicode_escape, __pyx_k_unicode_escape, sizeof(__pyx_k_unicode_escape), 0, 0, 1, 1},
  {&__pyx_kp_s_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 42, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "data_structure/graph_c/graph.pyx":54
 * 
 *     cpdef str get_dot_format(self, int max_text_width):
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')             # <<<<<<<<<<<<<<
 *         if self._node.type == NodeType.CLASS_NODE:
 *             return '"%s"[style="filled",color="white",fillcolor="lightgray",label="%s"];' % (self._node.id, label)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_n_s_unicode_escape); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self__node_cannot_be_converted_t); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._node cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_self__node_cannot_be_converted_t); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "data_structure/graph_c/graph.pyx":100
 * 
 *     cpdef str get_dot_format(self, int max_text_width):
 *         label = self.get_printed_label(max_text_width).encode('unicode_escape').decode('utf-8')             # <<<<<<<<<<<<<<
 *         return '"%s" -> "%s"[color="brown",fontcolor="black",label="%s"];' % (self._link.source_id, self._link.target_id, label)
 * 
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_unicode_escape); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_utf_8); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self__link_cannot_be_converted_t); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self._link cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self__link_cannot_be_converted_t); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "data_structure/graph_c/graph.pyx":313
 * 
 *     @staticmethod
 *     def from_dict(dict obj) -> Graph:             # <<<<<<<<<<<<<<
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_n_s_obj); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_src_data_structure_graph_c_graph, __pyx_n_s_from_dict, 313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initgraph(void); /*proto*/
PyMODINIT_FUNC initgraph(void)
#else
PyMODINIT_FUNC PyInit_graph(void); /*proto*/
PyMODINIT_FUNC PyInit_graph(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        result = PyDict_SetItemString(moddict, to_name, value);
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__") < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__") < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static int __pyx_pymod_exec_graph(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::string __pyx_t_3;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m && __pyx_m == __pyx_pyinit_module) return 0;
  #endif
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_graph(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("graph", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_data_structure__graph_c__graph) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "data_structure.graph_c.graph")) {
      if (unlikely(PyDict_SetItemString(modules, "data_structure.graph_c.graph", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_14data_structure_7graph_c_5graph_GraphNode = &__pyx_vtable_14data_structure_7graph_c_5graph_GraphNode;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphNode.is_data_node = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_data_node;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphNode.is_class_node = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_is_class_node;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphNode.equal = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_equal;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphNode.get_first_incoming_link = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_first_incoming_link;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphNode.get_printed_label = (PyObject *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_printed_label;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphNode.get_dot_format = (PyObject *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphNode_get_dot_format;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph_GraphNode) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph_GraphNode.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_14data_structure_7graph_c_5graph_GraphNode.tp_dict, __pyx_vtabptr_14data_structure_7graph_c_5graph_GraphNode) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "GraphNode", (PyObject *)&__pyx_type_14data_structure_7graph_c_5graph_GraphNode) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14data_structure_7graph_c_5graph_GraphNode) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __pyx_ptype_14data_structure_7graph_c_5graph_GraphNode = &__pyx_type_14data_structure_7graph_c_5graph_GraphNode;
  __pyx_vtabptr_14data_structure_7graph_c_5graph_GraphLink = &__pyx_vtable_14data_structure_7graph_c_5graph_GraphLink;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink.get_source_node_c = (isi::Node *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *))__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_source_node_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink.get_target_node_c = (isi::Node *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *))__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_target_node_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink.equal = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_equal;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink.get_source_node = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_source_node;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink.get_target_node = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_target_node;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink.get_printed_label = (PyObject *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_printed_label;
  __pyx_vtable_14data_structure_7graph_c_5graph_GraphLink.get_dot_format = (PyObject *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_9GraphLink_get_dot_format;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph_GraphLink) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph_GraphLink.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_14data_structure_7graph_c_5graph_GraphLink.tp_dict, __pyx_vtabptr_14data_structure_7graph_c_5graph_GraphLink) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "GraphLink", (PyObject *)&__pyx_type_14data_structure_7graph_c_5graph_GraphLink) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14data_structure_7graph_c_5graph_GraphLink) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __pyx_ptype_14data_structure_7graph_c_5graph_GraphLink = &__pyx_type_14data_structure_7graph_c_5graph_GraphLink;
  __pyx_vtabptr_14data_structure_7graph_c_5graph_Graph = &__pyx_vtable_14data_structure_7graph_c_5graph_Graph;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.add_new_node_c = (isi::Node *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::NodeType, std::string))__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_node_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.add_new_link_c = (isi::Link *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::LinkType, std::string, int, int))__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_link_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_node_by_id_c = (isi::Node *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_node_by_id_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_link_by_id_c = (isi::Link *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_link_by_id_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_n_nodes_c = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_nodes_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_n_links_c = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_links_c;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.set_name = (void (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, std::string, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_set_name;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_n_nodes = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_nodes;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_n_links = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_n_links;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.clone = (struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch, struct __pyx_opt_args_14data_structure_7graph_c_5graph_5Graph_clone *__pyx_optional_args))__pyx_f_14data_structure_7graph_c_5graph_5Graph_clone;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.real_add_new_node = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *, enum isi::NodeType, std::string, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_node;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.real_add_new_link = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *, enum isi::LinkType, std::string, int, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_real_add_new_link;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.add_new_node = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::NodeType, std::string, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_node;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.add_new_link = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, enum isi::LinkType, std::string, int, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_add_new_link;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.has_node_with_id = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_has_node_with_id;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.has_link_with_id = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_has_link_with_id;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_node_by_id = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphNode *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_node_by_id;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.get_link_by_id = (struct __pyx_obj_14data_structure_7graph_c_5graph_GraphLink *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_get_link_by_id;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.iter_nodes = (PyObject *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_nodes;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.iter_links = (PyObject *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_iter_links;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.equal = (int (*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_equal;
  __pyx_vtable_14data_structure_7graph_c_5graph_Graph.to_dict = (PyObject *(*)(struct __pyx_obj_14data_structure_7graph_c_5graph_Graph *, int __pyx_skip_dispatch))__pyx_f_14data_structure_7graph_c_5graph_5Graph_to_dict;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph_Graph) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph_Graph.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_14data_structure_7graph_c_5graph_Graph.tp_dict, __pyx_vtabptr_14data_structure_7graph_c_5graph_Graph) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "Graph", (PyObject *)&__pyx_type_14data_structure_7graph_c_5graph_Graph) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_14data_structure_7graph_c_5graph_Graph) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __pyx_ptype_14data_structure_7graph_c_5graph_Graph = &__pyx_type_14data_structure_7graph_c_5graph_Graph;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links.tp_print = 0;
  __pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links = &__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct__iter_incoming_links;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links.tp_print = 0;
  __pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links = &__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_1_iter_outgoing_links;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes) < 0) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes.tp_print = 0;
  __pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes = &__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_2_iter_class_nodes;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes) < 0) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes.tp_print = 0;
  __pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes = &__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_3_iter_data_nodes;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label) < 0) __PYX_ERR(0, 270, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label.tp_print = 0;
  __pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label = &__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_4_iter_nodes_by_label;
  if (PyType_Ready(&__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label) < 0) __PYX_ERR(0, 283, __pyx_L1_error)
  __pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label.tp_print = 0;
  __pyx_ptype_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label = &__pyx_type_14data_structure_7graph_c_5graph___pyx_scope_struct_5_iter_links_by_label;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "data_structure/graph_c/graph.pyx":7
 * from libcpp.vector cimport vector
 * from libc.stdlib cimport malloc, free
 * from semantic_modeling.algorithm.string import auto_wrap             # <<<<<<<<<<<<<<
 * from data_structure.utilities import render_graph, graph2img, graph2pdf, graph2dict, dict2graph
 * from sparsehash.dense_hash_map cimport dense_hash_map
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_auto_wrap);
  __Pyx_GIVEREF(__pyx_n_s_auto_wrap);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_auto_wrap);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_semantic_modeling_algorithm_stri, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_auto_wrap); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_auto_wrap, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "data_structure/graph_c/graph.pyx":8
 * from libc.stdlib cimport malloc, free
 * from semantic_modeling.algorithm.string import auto_wrap
 * from data_structure.utilities import render_graph, graph2img, graph2pdf, graph2dict, dict2graph             # <<<<<<<<<<<<<<
 * from sparsehash.dense_hash_map cimport dense_hash_map
 * 
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_render_graph);
  __Pyx_GIVEREF(__pyx_n_s_render_graph);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_render_graph);
  __Pyx_INCREF(__pyx_n_s_graph2img);
  __Pyx_GIVEREF(__pyx_n_s_graph2img);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_graph2img);
  __Pyx_INCREF(__pyx_n_s_graph2pdf);
  __Pyx_GIVEREF(__pyx_n_s_graph2pdf);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_graph2pdf);
  __Pyx_INCREF(__pyx_n_s_graph2dict);
  __Pyx_GIVEREF(__pyx_n_s_graph2dict);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_graph2dict);
  __Pyx_INCREF(__pyx_n_s_dict2graph);
  __Pyx_GIVEREF(__pyx_n_s_dict2graph);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_dict2graph);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_data_structure_utilities, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_render_graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_render_graph, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_graph2img); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_graph2img, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_graph2pdf); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_graph2pdf, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_graph2dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_graph2dict, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_dict2graph); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_dict2graph, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "data_structure/graph_c/graph.pyx":106
 * cdef class Graph:
 * 
 *     def __cinit__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph", *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._graph_c = new GraphC(index_node_type, index_node_label, index_link_label, estimated_n_nodes, estimated_n_links)
 * 
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_graph); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_k__9 = __pyx_t_3;

  /* "data_structure/graph_c/graph.pyx":109
 *         self._graph_c = new GraphC(index_node_type, index_node_label, index_link_label, estimated_n_nodes, estimated_n_links)
 * 
 *     def __init__(self, bint index_node_type=False, bint index_node_label=False, bint index_link_label=False, int estimated_n_nodes=24, int estimated_n_links=23, string name=b"graph"):             # <<<<<<<<<<<<<<
 *         self.name = name
 *         self.gnodes = []
 */
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_graph); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_k__10 = __pyx_t_3;

  /* "data_structure/graph_c/graph.pyx":313
 * 
 *     @staticmethod
 *     def from_dict(dict obj) -> Graph:             # <<<<<<<<<<<<<<
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14data_structure_7graph_c_5graph_5Graph_51from_dict, NULL, __pyx_n_s_data_structure_graph_c_graph); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph->tp_dict, __pyx_n_s_from_dict, __pyx_t_1) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14data_structure_7graph_c_5graph_Graph);

  /* "data_structure/graph_c/graph.pyx":312
 *         return graph2dict(self)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def from_dict(dict obj) -> Graph:
 *         return dict2graph(obj, Graph, GraphNode, GraphLink)
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph, __pyx_n_s_from_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14data_structure_7graph_c_5graph_Graph->tp_dict, __pyx_n_s_from_dict, __pyx_t_1) < 0) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14data_structure_7graph_c_5graph_Graph);

  /* "data_structure/graph_c/graph.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init data_structure.graph_c.graph", 0, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init data_structure.graph_c.graph");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
#include "frameobject.h"
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = f->f_localsplus;
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyErrFetchRestore */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
  static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* GetModuleGlobalName */
  static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* decode_c_bytes */
    static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* GetItemInt */
    static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely((0 <= wrapped_i) & (wrapped_i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* RaiseDoubleKeywords */
    static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
    static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
    static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
    static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SetVTable */
    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetNameInClass */
    static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    return __Pyx_GetModuleGlobalName(name);
}
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
      use_cline = PyDict_GetItem(*cython_runtime_dict, __pyx_n_s_cline_in_traceback);
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (PyObject_Not(use_cline) != 0) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__isi_3a__3a_NodeType(enum isi::NodeType value) {
    const enum isi::NodeType neg_one = (enum isi::NodeType) -1, const_zero = (enum isi::NodeType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum isi::NodeType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum isi::NodeType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum isi::NodeType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum isi::NodeType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum isi::NodeType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum isi::NodeType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__isi_3a__3a_LinkType(enum isi::LinkType value) {
    const enum isi::LinkType neg_one = (enum isi::LinkType) -1, const_zero = (enum isi::LinkType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum isi::LinkType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum isi::LinkType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum isi::LinkType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum isi::LinkType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum isi::LinkType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum isi::LinkType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE enum isi::NodeType __Pyx_PyInt_As_enum__isi_3a__3a_NodeType(PyObject *x) {
    const enum isi::NodeType neg_one = (enum isi::NodeType) -1, const_zero = (enum isi::NodeType) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum isi::NodeType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum isi::NodeType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum isi::NodeType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum isi::NodeType, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum isi::NodeType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) >= 2 * PyLong_SHIFT) {
                            return (enum isi::NodeType) (((((enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum isi::NodeType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) >= 3 * PyLong_SHIFT) {
                            return (enum isi::NodeType) (((((((enum isi::NodeType)digits[2]) << PyLong_SHIFT) | (enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum isi::NodeType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) >= 4 * PyLong_SHIFT) {
                            return (enum isi::NodeType) (((((((((enum isi::NodeType)digits[3]) << PyLong_SHIFT) | (enum isi::NodeType)digits[2]) << PyLong_SHIFT) | (enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum isi::NodeType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum isi::NodeType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::NodeType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum isi::NodeType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::NodeType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum isi::NodeType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum isi::NodeType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum isi::NodeType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum isi::NodeType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum isi::NodeType) (((enum isi::NodeType)-1)*(((((enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum isi::NodeType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum isi::NodeType) ((((((enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum isi::NodeType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum isi::NodeType) (((enum isi::NodeType)-1)*(((((((enum isi::NodeType)digits[2]) << PyLong_SHIFT) | (enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum isi::NodeType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum isi::NodeType) ((((((((enum isi::NodeType)digits[2]) << PyLong_SHIFT) | (enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum isi::NodeType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum isi::NodeType) (((enum isi::NodeType)-1)*(((((((((enum isi::NodeType)digits[3]) << PyLong_SHIFT) | (enum isi::NodeType)digits[2]) << PyLong_SHIFT) | (enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum isi::NodeType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::NodeType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::NodeType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum isi::NodeType) ((((((((((enum isi::NodeType)digits[3]) << PyLong_SHIFT) | (enum isi::NodeType)digits[2]) << PyLong_SHIFT) | (enum isi::NodeType)digits[1]) << PyLong_SHIFT) | (enum isi::NodeType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum isi::NodeType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::NodeType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum isi::NodeType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::NodeType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum isi::NodeType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum isi::NodeType) -1;
        }
    } else {
        enum isi::NodeType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum isi::NodeType) -1;
        val = __Pyx_PyInt_As_enum__isi_3a__3a_NodeType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum isi::NodeType");
    return (enum isi::NodeType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum isi::NodeType");
    return (enum isi::NodeType) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE enum isi::LinkType __Pyx_PyInt_As_enum__isi_3a__3a_LinkType(PyObject *x) {
    const enum isi::LinkType neg_one = (enum isi::LinkType) -1, const_zero = (enum isi::LinkType) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(enum isi::LinkType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (enum isi::LinkType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum isi::LinkType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(enum isi::LinkType, digit, digits[0])
                case 2:
                    if (8 * sizeof(enum isi::LinkType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) >= 2 * PyLong_SHIFT) {
                            return (enum isi::LinkType) (((((enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum isi::LinkType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) >= 3 * PyLong_SHIFT) {
                            return (enum isi::LinkType) (((((((enum isi::LinkType)digits[2]) << PyLong_SHIFT) | (enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum isi::LinkType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) >= 4 * PyLong_SHIFT) {
                            return (enum isi::LinkType) (((((((((enum isi::LinkType)digits[3]) << PyLong_SHIFT) | (enum isi::LinkType)digits[2]) << PyLong_SHIFT) | (enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (enum isi::LinkType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(enum isi::LinkType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::LinkType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum isi::LinkType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::LinkType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (enum isi::LinkType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(enum isi::LinkType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(enum isi::LinkType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(enum isi::LinkType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum isi::LinkType) (((enum isi::LinkType)-1)*(((((enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(enum isi::LinkType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) - 1 > 2 * PyLong_SHIFT) {
                            return (enum isi::LinkType) ((((((enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(enum isi::LinkType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum isi::LinkType) (((enum isi::LinkType)-1)*(((((((enum isi::LinkType)digits[2]) << PyLong_SHIFT) | (enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(enum isi::LinkType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) - 1 > 3 * PyLong_SHIFT) {
                            return (enum isi::LinkType) ((((((((enum isi::LinkType)digits[2]) << PyLong_SHIFT) | (enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(enum isi::LinkType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum isi::LinkType) (((enum isi::LinkType)-1)*(((((((((enum isi::LinkType)digits[3]) << PyLong_SHIFT) | (enum isi::LinkType)digits[2]) << PyLong_SHIFT) | (enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(enum isi::LinkType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(enum isi::LinkType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(enum isi::LinkType) - 1 > 4 * PyLong_SHIFT) {
                            return (enum isi::LinkType) ((((((((((enum isi::LinkType)digits[3]) << PyLong_SHIFT) | (enum isi::LinkType)digits[2]) << PyLong_SHIFT) | (enum isi::LinkType)digits[1]) << PyLong_SHIFT) | (enum isi::LinkType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(enum isi::LinkType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::LinkType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(enum isi::LinkType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(enum isi::LinkType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            enum isi::LinkType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (enum isi::LinkType) -1;
        }
    } else {
        enum isi::LinkType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (enum isi::LinkType) -1;
        val = __Pyx_PyInt_As_enum__isi_3a__3a_LinkType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum isi::LinkType");
    return (enum isi::LinkType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum isi::LinkType");
    return (enum isi::LinkType) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if PY_VERSION_HEX >= 0x030700A2
    *type = tstate->exc_state.exc_type;
    *value = tstate->exc_state.exc_value;
    *tb = tstate->exc_state.exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = type;
    tstate->exc_state.exc_value = value;
    tstate->exc_state.exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if PY_VERSION_HEX >= 0x030700A2
    tmp_type = tstate->exc_state.exc_type;
    tmp_value = tstate->exc_state.exc_value;
    tmp_tb = tstate->exc_state.exc_traceback;
    tstate->exc_state.exc_type = *type;
    tstate->exc_state.exc_value = *value;
    tstate->exc_state.exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
    static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = NULL;
#if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(function)) {
                PyObject *args[2] = {self, arg};
                result = __Pyx_PyCFunction_FastCall(function, args, 2);
                goto done;
            }
            #endif
            args = PyTuple_New(2);
            if (unlikely(!args)) goto done;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
    goto done;
done:
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto done;
    result = __Pyx__PyObject_CallMethod1(method, arg);
done:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
    #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_CheckExact((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if (0) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_CheckExact(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    if (self->exc_type) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
        __Pyx_ExceptionSave(&self->exc_type, &self->exc_value, &self->exc_traceback);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__pyx_CoroutineObject *self) {
    if (likely(self->exc_traceback)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = _PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_CheckExact(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_CheckExact(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
        static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
        #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
        static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
        static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
        static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            PyErr_Clear();
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
